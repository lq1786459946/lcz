{"title":"monorepo架构 前端项目管理模式","uid":"23b6e0ae5d6dee99687505d16c2a98a4","slug":"monorepo架构 前端项目管理模式","date":"2025-03-07T06:06:50.000Z","updated":"2025-03-07T06:11:13.896Z","comments":true,"path":"api/articles/monorepo架构 前端项目管理模式.json","keywords":null,"cover":null,"content":"<h2 id=\"monorepo架构-前端项目管理模式\"><a href=\"#monorepo架构-前端项目管理模式\" class=\"headerlink\" title=\"monorepo架构 前端项目管理模式\"></a>monorepo架构 前端项目管理模式</h2><h3 id=\"项目管理模式\"><a href=\"#项目管理模式\" class=\"headerlink\" title=\"项目管理模式\"></a>项目管理模式</h3><p>在当下大型前端项目中基于 monorepo 的解决方案已经深入人心，无论是比如 Google、Facebook，社区内部知名的开源项目 Babel、Vue-next ，还是集团中 rax-components 等等，都使用了 monorepo 方案来管理他们的代码。</p>\n<h3 id=\"两大策略–Monorepo（单体仓库）与-MultiRepo（多仓库）\"><a href=\"#两大策略–Monorepo（单体仓库）与-MultiRepo（多仓库）\" class=\"headerlink\" title=\"两大策略–Monorepo（单体仓库）与 MultiRepo（多仓库）\"></a>两大策略–Monorepo（单体仓库）与 MultiRepo（多仓库）</h3><ul>\n<li><code>Multirepo</code>是由多个仓库组成的项目管理方式，每个仓库有着独立的工作流、组件与配置</li>\n<li><code>Monorepo</code>则将不同仓库整合成为一个仓库，并共享工作流、组件与配置。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>场景</strong></th>\n<th><strong>MultiRepo</strong></th>\n<th><strong>MonoRepo</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码可见性</td>\n<td>✅ 代码隔离，研发者只需关注自己负责的仓库 ❌ 包管理按照各自owner划分，当出现问题时，需要到依赖包中进行判断并解决。</td>\n<td>✅ 一个仓库中多个相关项目，很容易看到整个代码库的变化趋势，更好的团队协作。 ❌ 增加了非owner改动代码的风险</td>\n</tr>\n<tr>\n<td>依赖管理</td>\n<td>❌ 多个仓库都有自己的 node_modules，存在依赖重复安装情况，占用磁盘内存大。</td>\n<td>✅ 多项目代码都在一个仓库中，相同版本依赖提升到顶层只安装一次，节省磁盘内存，</td>\n</tr>\n<tr>\n<td>代码权限</td>\n<td>✅ 各项目单独仓库，不会出现代码被误改的情况，单个项目出现问题不会影响其他项目。</td>\n<td>❌ 多个项目代码都在一个仓库中，没有项目粒度的权限管控，一个项目出问题，可能影响所有项目。</td>\n</tr>\n<tr>\n<td>开发迭代</td>\n<td>✅ 仓库体积小，模块划分清晰，可维护性强。 ❌ 多仓库来回切换（编辑器及命令行），项目多的话效率很低。多仓库见存在依赖时，需要手动 <code>npm link</code>，操作繁琐。 ❌ 依赖管理不便，多个依赖可能在多个仓库中存在不同版本，重复安装，npm link 时不同项目的依赖会存在冲突。</td>\n<td>✅ 多个项目都在一个仓库中，可看到相关项目全貌，编码非常方便。 ✅ 代码复用高，方便进行代码重构。 ❌ 多项目在一个仓库中，代码体积多大几个 G，<code>git clone</code>时间较长。 ✅ 依赖调试方便，依赖包迭代场景下，借助工具自动 npm link，直接使用最新版本依赖，简化了操作流程。</td>\n</tr>\n<tr>\n<td>工程配置</td>\n<td>❌ 各项目构建、打包、代码校验都各自维护，不一致时会导致代码差异或构建差异。</td>\n<td>✅ 多项目在一个仓库，工程配置一致，代码质量标准及风格也很容易一致。</td>\n</tr>\n<tr>\n<td>构建部署</td>\n<td>❌ 多个项目间存在依赖，部署时需要手动到不同的仓库根据先后顺序去修改版本及进行部署，操作繁琐效率低。</td>\n<td>✅ 构建性 Monorepo 工具可以配置依赖项目的构建优先级，可以实现一次命令完成所有的部署。</td>\n</tr>\n</tbody></table>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总结来说， monorepo 倾向于<strong>增强协作和代码一致性，而 multirepo 则更强调项目独立性和简单性</strong>。选择哪种模式取决于具体团队规模、项目间关联程度、基础设施支持等因素。</p>\n<p>在github上我们可以看见无论是 element plus 、 Ant design 以及 vue ，以及其他社区开源的项目都是使用的 monorepo 方案来管理他们的项目</p>\n","feature":true,"text":"monorepo架构 前端项目管理模式项目管理模式在当下大型前端项目中基于 monorepo 的解决方案已经深入人心，无论是比如 Google、Facebook...","permalink":"/post/monorepo架构 前端项目管理模式","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"其他","slug":"其他","count":3,"path":"api/categories/其他.json"}],"tags":[{"name":"其他","slug":"其他","count":3,"path":"api/tags/其他.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#monorepo%E6%9E%B6%E6%9E%84-%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">monorepo架构 前端项目管理模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">项目管理模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E5%A4%A7%E7%AD%96%E7%95%A5%E2%80%93Monorepo%EF%BC%88%E5%8D%95%E4%BD%93%E4%BB%93%E5%BA%93%EF%BC%89%E4%B8%8E-MultiRepo%EF%BC%88%E5%A4%9A%E4%BB%93%E5%BA%93%EF%BC%89\"><span class=\"toc-text\">两大策略–Monorepo（单体仓库）与 MultiRepo（多仓库）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue3中的插槽源码","uid":"a7fb576f585a285d0be31f11b996bbe0","slug":"Vue3中的插槽源码","date":"2025-03-07T06:15:50.000Z","updated":"2025-03-07T06:19:53.950Z","comments":true,"path":"api/articles/Vue3中的插槽源码.json","keywords":null,"cover":null,"text":"dome我们先来看个常见的插槽demo，其中子组件代码如下： 12345678910<template> <slot></slot> <slot name=\"h...","permalink":"/post/Vue3中的插槽源码","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/categories/Vue3.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/tags/Vue3.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Git提交规范 提交信息验证","uid":"0b4427dd59aaa64311629076103363d5","slug":"Git提交规范 提交信息验证","date":"2025-01-17T06:08:50.000Z","updated":"2025-01-17T06:12:15.798Z","comments":true,"path":"api/articles/Git提交规范 提交信息验证.json","keywords":null,"cover":[],"text":"背景介绍项目中代码格式以及git message如果不加以约束，可能最终的格式会五花八门，这样很不利于项目维护，好的提交记录，会将每次提交内容的范围，内容，以及...","permalink":"/post/Git提交规范 提交信息验证","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"其他","slug":"其他","count":3,"path":"api/categories/其他.json"}],"tags":[{"name":"其他","slug":"其他","count":3,"path":"api/tags/其他.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}