{"title":"Vue3的provide和inject源码","uid":"6bbd855e83e27561534b81f565184962","slug":"Vue3的provide和inject源码","date":"2024-12-27T04:32:10.000Z","updated":"2024-12-27T06:37:20.925Z","comments":true,"path":"api/articles/Vue3的provide和inject源码.json","keywords":null,"cover":null,"content":"<p><code>provide</code>和<code>inject</code>函数是如何实现数据多级传递的。</p>\n<h2 id=\"看个demo\"><a href=\"#看个demo\" class=\"headerlink\" title=\"看个demo\"></a>看个demo</h2><p>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ChildDemo</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildDemo</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./child.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, provide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 提供响应式的值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">provide</span>(<span class=\"string\">&quot;count&quot;</span>, count);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在父组件中使用<code>provide</code>为后代组件注入一个<code>count</code>响应式变量。</p>\n<p>再来看看子组件<code>child.vue</code>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 注入响应式的值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">inject</span>(<span class=\"string\">&quot;count&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;inject count is:&quot;</span>, count);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码可以看到在孙子组件中使用<code>inject</code>函数拿到了父组件中注入的<code>count</code>响应式变量。</p>\n<h2 id=\"provide函数\"><a href=\"#provide函数\" class=\"headerlink\" title=\"provide函数\"></a><code>provide</code>函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">provide</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!currentInstance) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!!(process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&quot;production&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn$1</span>(<span class=\"string\">`provide() can only be used inside setup().`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> provides = currentInstance.<span class=\"property\">provides</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentProvides = currentInstance.<span class=\"property\">parent</span> &amp;&amp; currentInstance.<span class=\"property\">parent</span>.<span class=\"property\">provides</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parentProvides === provides) &#123;</span><br><span class=\"line\">      provides = currentInstance.<span class=\"property\">provides</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(parentProvides);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    provides[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先判断<code>currentInstance</code>是否有值，如果没有就说明当前没有vue实例，也就是说当前调用provide函数的地方是不在setup函数中执行的，然后给出警告provide只能在setup中使用。</p>\n<p>然后走进else逻辑中，首先从当前vue实例中取出存的<code>provides</code>属性对象。并且通过<code>currentInstance.parent.provides</code>拿到父组件vue实例中的<code>provides</code>属性对象。</p>\n<p>这里为什么需要判断<code>if (parentProvides === provides)</code>呢？</p>\n<p>因为在创建子组件时会默认使用父组件的<code>provides</code>属性对象作为父组件的<code>provides</code>属性对象。代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">instance</span>: <span class=\"title class_\">ComponentInternalInstance</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">uid</span>: uid++,</span><br><span class=\"line\">  vnode,</span><br><span class=\"line\">  type,</span><br><span class=\"line\">  parent,</span><br><span class=\"line\">  <span class=\"attr\">provides</span>: parent ? parent.<span class=\"property\">provides</span> : <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(appContext.<span class=\"property\">provides</span>),</span><br><span class=\"line\">  <span class=\"comment\">// ...省略</span></span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码可以看到如果有父组件，那么创建子组件实例的时候就直接使用父组件的<code>provides</code>属性对象。</p>\n<p>所以这里在provide函数中需要判断<code>if (parentProvides === provides)</code>，如果相等说明当前父组件和子组件是共用的同一个<code>provides</code>属性对象。此时如果子组件调用了provide函数，说明子组件需要创建自己的<code>provides</code>属性对象。</p>\n<p>并且新的属性对象还需要能够访问到父组件中注入的内容，所以这里以父组件的<code>provides</code>属性对象为原型去创建一个新的子组件的，这样在子组件中不仅能够访问到原型链中注入的<code>provides</code>属性对象，也能够访问到自己注入进去的<code>provides</code>属性对象。</p>\n<p>最后就是执行<code>provides[key] = value</code>将当前注入的内容存到<code>provides</code>属性对象中。</p>\n<h2 id=\"inject函数\"><a href=\"#inject函数\" class=\"headerlink\" title=\"inject函数\"></a>inject函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">inject</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  key: InjectionKey&lt;any&gt; | string,</span></span><br><span class=\"line\"><span class=\"params\">  defaultValue?: unknown,</span></span><br><span class=\"line\"><span class=\"params\">  treatDefaultAsFactory = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// fallback to `currentRenderingInstance` so that this can be called in</span></span><br><span class=\"line\">  <span class=\"comment\">// a functional component</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = currentInstance || currentRenderingInstance</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// also support looking up from app-level provides w/ `app.runWithContext()`</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (instance || currentApp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> provides = currentApp</span><br><span class=\"line\">      ? currentApp.<span class=\"property\">_context</span>.<span class=\"property\">provides</span></span><br><span class=\"line\">      : instance</span><br><span class=\"line\">        ? instance.<span class=\"property\">parent</span> == <span class=\"literal\">null</span></span><br><span class=\"line\">          ? instance.<span class=\"property\">vnode</span>.<span class=\"property\">appContext</span> &amp;&amp; instance.<span class=\"property\">vnode</span>.<span class=\"property\">appContext</span>.<span class=\"property\">provides</span></span><br><span class=\"line\">          : instance.<span class=\"property\">parent</span>.<span class=\"property\">provides</span></span><br><span class=\"line\">        : <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (provides &amp;&amp; key <span class=\"keyword\">in</span> provides) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> provides[key]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> treatDefaultAsFactory &amp;&amp; <span class=\"title function_\">isFunction</span>(defaultValue)</span><br><span class=\"line\">        ? defaultValue.<span class=\"title function_\">call</span>(instance &amp;&amp; instance.<span class=\"property\">proxy</span>)</span><br><span class=\"line\">        : defaultValue</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(<span class=\"string\">`injection &quot;<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>(key)&#125;</span>&quot; not found.`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">warn</span>(<span class=\"string\">`inject() can only be used inside setup() or functional components.`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先拿到当前渲染的vue实例赋值给本地变量<code>instance</code>。接着使用<code>if (instance || currentApp)</code>判断当前是否有vue实例，如果没有看看有没有使用<code>app.runWithContext</code>手动注入了上下文，如果注入了那么<code>currentApp</code>就有值。</p>\n<p>接着就是一串三元表达式，如果使用<code>app.runWithContext</code>手动注入了上下文，那么就优先从注入的上下文中取出<code>provides</code>属性对象。</p>\n<p>如果没有那么就看当前组件是否满足<code>instance.parent == null</code>，也就是说当前组件是否是根节点。如果是根节点就取app中注入的<code>provides</code>属性对象。</p>\n<p>如果上面的都不满足就去取父组件中注入的<code>provides</code>属性对象，前面我们讲过了在inject函数阶段，如果子组件内没有使用inject函数，那么就会直接使用父组件的<code>provides</code>属性对象。如果子组件中使用了inject函数，那么就以父组件的<code>provides</code>属性对象为原型去创建一个新的子组件的<code>provides</code>属性对象，从而形成一条原型链。</p>\n<p>所以这里的孙子节点的<code>provides</code>属性对象中当然就能够拿到父组件中注入的<code>count</code>响应式变量，那么<code>if (provides &amp;&amp; key in provides)</code>就满足条件，最后会走到<code>return provides[key]</code>中将父组件中注入的响应式变量<code>count</code>原封不动的返回。</p>\n<p>还有就是如果我们inject一个没有使用provide存入的key，并且传入了第二个参数<code>defaultValue</code>，此时<code>else if (arguments.length &gt; 1)</code>就满足条件了。</p>\n<p>在里面会去判断是否传入第三个参数<code>treatDefaultAsFactory</code>，如果这个参数的值为true，说明第二个参数<code>defaultValue</code>可能是一个工厂函数。那么就执行<code>defaultValue.call(instance &amp;&amp; instance.proxy)</code>将<code>defaultValue</code>的当中工厂函数的执行结果进行返回。</p>\n<p>如果第三个参数<code>treatDefaultAsFactory</code>的值不为true，那么就直接将第二个参数<code>defaultValue</code>当做默认值返回。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在创建vue组件实例时，子组件的<code>provides</code>属性对象会直接使用父组件的<code>provides</code>属性对象。如果在子组件中使用了<code>provide</code>函数，那么会以父组件的<code>provides</code>属性对象为原型创建一个新的<code>provides</code>属性对象，并且将<code>provide</code>函数中注入的内容塞到新的<code>provides</code>属性对象中，从而形成了原型链。</p>\n<p>在孙子组件中，他的parent就是子组件。前面我们讲过了如果没有在组件内使用<code>provide</code>注入东西（很明显这里的子组件确实没有注入任何东西），那么就会直接使用他的父组件的<code>provides</code>属性对象，所以这里的子组件是直接使用的是父组件中的<code>provides</code>属性对象。所以在孙子组件中可以直接使用<code>inject</code>函数拿到父组件中注入的内容。</p>\n","feature":true,"text":"provide和inject函数是如何实现数据多级传递的。 看个demo代码如下： 123456789101112<template> <ChildDemo /...","permalink":"/post/Vue3的provide和inject源码","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Vue3","slug":"Vue3","count":7,"path":"api/categories/Vue3.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":7,"path":"api/tags/Vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9C%8B%E4%B8%AAdemo\"><span class=\"toc-text\">看个demo</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#provide%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">provide函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#inject%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">inject函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"前端实现画中画","uid":"0818b661b1c32ba6a0c1f1f3dba65b2c","slug":"前端实现画中画","date":"2024-12-20T06:05:06.787Z","updated":"2024-12-20T06:12:39.241Z","comments":true,"path":"api/articles/前端实现画中画.json","keywords":null,"cover":null,"text":"Document Picture-in-Picture 介绍文档画中画 (Document Picture-in-Picture, 本文简称 PiP)。 你可能...","permalink":"/post/前端实现画中画","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"JS","slug":"JS","count":3,"path":"api/categories/JS.json"}],"tags":[{"name":"JS","slug":"JS","count":3,"path":"api/tags/JS.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}