<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git提交规范 提交信息验证</title>
      <link href="//post/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83%20%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E9%AA%8C%E8%AF%81.html"/>
      <url>//post/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83%20%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E9%AA%8C%E8%AF%81.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>项目中代码格式以及git message如果不加以约束，可能最终的格式会五花八门，这样很不利于项目维护，好的提交记录，会将每次提交内容的范围，内容，以及涉及到的 bug 都能清晰的展示出来，且格式一致，便于查找找提交记录，对查看代码提交记录或者审核的人更友好，能够更好地了解项目的生命周期以及中间出现的问题。</p><h2 id="Commit-message-格式"><a href="#Commit-message-格式" class="headerlink" title="Commit message 格式"></a>Commit message 格式</h2><p>为了方便使用，我们避免了过于复杂的规定，格式较为简单且不限制中英文：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;)<span class="punctuation">:</span> &lt;subject&gt;</span><br><span class="line"><span class="comment">// 注意冒号 : 后有空格</span></span><br><span class="line"><span class="comment">// 如 feat(miniprogram): 增加了小程序模板消息相关功能</span></span><br></pre></td></tr></table></figure><p>scope选填表示commit的作用范围，如数据层、视图层，也可以是目录名称 subject必填用于对commit进行简短的描述 type必填表示提交类型，值有以下几种：</p><ol><li>feat - 新功能 feature</li><li>fix - 修复 bug</li><li>docs - 文档注释</li><li>style - 代码格式(不影响代码运行的变动)</li><li>refactor - 重构、优化(既不增加新功能，也不是修复bug)</li><li>perf - 性能优化</li><li>test - 增加测试</li><li>chore - 构建过程或辅助工具的变动</li><li>revert - 回退</li><li>build - 打包</li></ol><h3 id="如何加入项目"><a href="#如何加入项目" class="headerlink" title="如何加入项目"></a>如何加入项目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commitlint</span></span><br><span class="line"><span class="comment">// 项目目录下安装</span></span><br><span class="line">npm i commitlint --save-dev</span><br><span class="line">npm i @commitlint/config-conventional --save-dev</span><br><span class="line"><span class="comment">// 在项目目录下，新建配置文件 commitlint.config.js， 内容如下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// type 类型定义</span></span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, [</span><br><span class="line">      <span class="string">&quot;feat&quot;</span>, <span class="comment">// 新功能 feature</span></span><br><span class="line">      <span class="string">&quot;fix&quot;</span>, <span class="comment">// 修复 bug</span></span><br><span class="line">      <span class="string">&quot;docs&quot;</span>, <span class="comment">// 文档注释</span></span><br><span class="line">      <span class="string">&quot;style&quot;</span>, <span class="comment">// 代码格式(不影响代码运行的变动)</span></span><br><span class="line">      <span class="string">&quot;refactor&quot;</span>, <span class="comment">// 重构(既不增加新功能，也不是修复bug)</span></span><br><span class="line">      <span class="string">&quot;perf&quot;</span>, <span class="comment">// 性能优化</span></span><br><span class="line">      <span class="string">&quot;test&quot;</span>, <span class="comment">// 增加测试</span></span><br><span class="line">      <span class="string">&quot;chore&quot;</span>, <span class="comment">// 构建过程或辅助工具的变动</span></span><br><span class="line">      <span class="string">&quot;revert&quot;</span>, <span class="comment">// 回退</span></span><br><span class="line">      <span class="string">&quot;build&quot;</span> <span class="comment">// 打包</span></span><br><span class="line">    ]],</span><br><span class="line">    <span class="comment">// subject 大小写不做校验</span></span><br><span class="line">    <span class="comment">// 自动部署的BUILD ROBOT的commit信息大写，以作区别</span></span><br><span class="line">    <span class="string">&#x27;subject-case&#x27;</span>: [<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// husky</span></span><br><span class="line"><span class="comment">// 项目目录下安装</span></span><br><span class="line">npm i husky --save-dev</span><br><span class="line"><span class="comment">// 在package.json文件中增加相关配置</span></span><br><span class="line"><span class="string">&quot;husky&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;commit-msg&quot;</span>: <span class="string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// commitizen</span></span><br><span class="line"><span class="comment">// 全局安装</span></span><br><span class="line">npm install commitizen -g</span><br><span class="line"><span class="comment">// 项目目录下安装</span></span><br><span class="line">npm install commitizen --save-dev</span><br><span class="line">commitizen init cz-customizable --save --save-exact</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在package.json文件中增加相关配置</span></span><br><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;./node_modules/cz-customizable&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在项目目录下，新建配置文件 .cz-config.js</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">types</span>: [</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;feat&#x27;</span>,     <span class="attr">name</span>: <span class="string">&#x27;feat:     新功能&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;fix&#x27;</span>,      <span class="attr">name</span>: <span class="string">&#x27;fix:      修复&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;docs&#x27;</span>,     <span class="attr">name</span>: <span class="string">&#x27;docs:     文档变更&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;style&#x27;</span>,    <span class="attr">name</span>: <span class="string">&#x27;style:    代码格式(不影响代码运行的变动)&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;refactor&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;refactor: 重构(既不是增加feature，也不是修复bug)&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;perf&#x27;</span>,     <span class="attr">name</span>: <span class="string">&#x27;perf:     性能优化&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;test&#x27;</span>,     <span class="attr">name</span>: <span class="string">&#x27;test:     增加测试&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;chore&#x27;</span>,    <span class="attr">name</span>: <span class="string">&#x27;chore:    构建过程或辅助工具的变动&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;revert&#x27;</span>,   <span class="attr">name</span>: <span class="string">&#x27;revert:   回退&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="string">&#x27;build&#x27;</span>,    <span class="attr">name</span>: <span class="string">&#x27;build:    打包&#x27;</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// override the messages, defaults are as follows</span></span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;请选择提交类型:&#x27;</span>,</span><br><span class="line">    <span class="comment">// scope: &#x27;请输入文件修改范围(可选):&#x27;,</span></span><br><span class="line">    <span class="comment">// used if allowCustomScopes is true</span></span><br><span class="line">    <span class="attr">customScope</span>: <span class="string">&#x27;请输入修改范围(可选):&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;请简要描述提交(必填):&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;请输入详细描述(可选，待优化去除，跳过即可):&#x27;</span>,</span><br><span class="line">    <span class="comment">// breaking: &#x27;List any BREAKING CHANGES (optional):\n&#x27;,</span></span><br><span class="line">    <span class="attr">footer</span>: <span class="string">&#x27;请输入要关闭的issue(待优化去除，跳过即可):&#x27;</span>,</span><br><span class="line">    <span class="attr">confirmCommit</span>: <span class="string">&#x27;确认使用以上信息提交？(y/n/e/h)&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">allowCustomScopes</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// allowBreakingChanges: [&#x27;feat&#x27;, &#x27;fix&#x27;],</span></span><br><span class="line">  <span class="attr">skipQuestions</span>: [<span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>],</span><br><span class="line">  <span class="comment">// limit subject length, commitlint默认是72</span></span><br><span class="line">  <span class="attr">subjectLimit</span>: <span class="number">72</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="检测提交信息"><a href="#检测提交信息" class="headerlink" title="检测提交信息"></a>检测提交信息</h2><p>该流程用于校验提交信息的写入是否符合规则要求。</p><p>安装依赖</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ghooks  validate-commit-msg --save-dev</span><br></pre></td></tr></table></figure><p>package.json配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ghooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commit-msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;validate-commit-msg&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="配置完成后其他人如何使用"><a href="#配置完成后其他人如何使用" class="headerlink" title="配置完成后其他人如何使用"></a>配置完成后其他人如何使用</h2><ol><li>将配置测试完成的代码合并至主分支。</li><li>其他开发者需要重新执行<code> npm i</code>安装相关依赖。</li><li>需要全局安装<code> npm i commitizen -g</code></li></ol><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git cz</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://atlas.pingcode.com/files/public/67887292e5e4b9c9c6a650af?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端项目协同开发统一代码格式化</title>
      <link href="//post/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%8D%8F%E5%90%8C%E5%BC%80%E5%8F%91%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96.html"/>
      <url>//post/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%8D%8F%E5%90%8C%E5%BC%80%E5%8F%91%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>现有业务项目中，开发人员使用的ide五花八门，既有Visual Studio Code、webstorm，也有idea、pycharm这种偏后端的ide；而且各自设置的code style也不一致，为了统一团队风格，减少后期代码维护量，决定进行整改。</p><h2 id="1-前端开发人员修改"><a href="#1-前端开发人员修改" class="headerlink" title="1.前端开发人员修改"></a>1.前端开发人员修改</h2><p>此操作要 “前端负责人修改项目”完成之后才能操作使用</p><h3 id="1-1Vscod"><a href="#1-1Vscod" class="headerlink" title="1.1Vscod"></a>1.1Vscod</h3><p>第一步 现有主流的前端格式化工具是prettier，需要进行安装和配置。</p><p><img src="https://atlas.pingcode.com/files/public/67861875e5e4b9c9c6a5fd76?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p><p>第二步 将鼠标光标挪至页面空白处，右键，于浮现的菜单里选中 “使用格式化文档” 。</p><p><img src="https://atlas.pingcode.com/files/public/6786196ff730dfcb64bcab77?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p><p>第三步 选中 Prettier-Code formatter 设置成默认值</p><p><img src="https://atlas.pingcode.com/files/public/678619cbf730dfcb64bcaba5?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p><p>第四步 执行保存动作后，若文档格式发生变化，就意味着保存成功。倘若未能成功，请参照下述步骤进行排查。</p><p><img src="https://atlas.pingcode.com/files/public/67861afef730dfcb64bcac1e?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p><p> 第五步 勾选 “Format On Paste” 和 “Format On Save” 这两个选项，完成勾选操作之后，请重启软件，以确保新的设置正常运行。</p><p><img src="https://atlas.pingcode.com/files/public/67861b2df730dfcb64bcac33?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p><h3 id="1-2-Webstorm"><a href="#1-2-Webstorm" class="headerlink" title="1.2 Webstorm"></a>1.2 Webstorm</h3><p>第一步  现有主流的前端格式化工具是prettier，需要进行安装和配置。</p><p><img src="https://atlas.pingcode.com/files/public/678625aae5e4b9c9c6a60397?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p><p>第二步 安装完插件进行以下配置，配置完成需要重启编辑器</p><p><img src="https://atlas.pingcode.com/files/public/67862796e5e4b9c9c6a60460?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p><p>第三步  文件代码发生变化之后执行保存动作，若文档格式发生变化，就意味着保存成功。倘若未能成功，请参照下述步骤进行排查。</p><p><img src="https://atlas.pingcode.com/files/public/67862959f730dfcb64bcb2ec?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzM3MDkyMzE5LCJleHAiOjE3MzcxMDMxMTl9.8xPf7972RwwKZA59VQZf7dQH3OVg6WVH__l_F8V6Cqw" alt="image.png"></p><h2 id="2-前端负责人修改项目"><a href="#2-前端负责人修改项目" class="headerlink" title="2. 前端负责人修改项目"></a>2. 前端负责人修改项目</h2><p>项目内安装Prettier：在项目目录下运行 npm install prettier –save-dev 来安装Prettier作为开发依赖。 创建Prettier配置文件：在项目根目录下创建一个.prettierrc 文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">150</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;useTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;quoteProps&quot;</span><span class="punctuation">:</span> <span class="string">&quot;as-needed&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;jsxBracketSameLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rangeStart&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;requirePragma&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;insertPragma&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;proseWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;htmlWhitespaceSensitivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ignore&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vueIndentScriptAndStyle&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;endOfLine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;usePrettierrc&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*.md&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-一键格式化整个项目"><a href="#3-一键格式化整个项目" class="headerlink" title="3.一键格式化整个项目"></a>3.一键格式化整个项目</h2><p>在package.json添加一键格式化所有代码的脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --config ./.prettierrc --write \&quot;./src/**/*.&#123;js,jsx,vue&#125;\&quot; &quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数柯里化</title>
      <link href="//post/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html"/>
      <url>//post/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是柯里化"><a href="#什么是柯里化" class="headerlink" title="什么是柯里化"></a>什么是柯里化</h3><p>先给出函数柯里化的定义 ：<strong>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</strong></p><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>这个是一个累加函数，接收三个参数，但是<strong>假设我有这样一种需求就是前两个参数不变，然后最后一个参数可以随意</strong>。</p><p>很多人，第一想法就是传入前两个不改不就行了。其实这个也能说是一个解决方案，但是代码得优雅，经常一调用就得穿前面那俩个固定的参数是不是很繁琐而且容易出错，出错之后还不好排查，对吧。</p><p>再去分析这个需求，咱们先不管函数的具体实现，这个需求的调用写法<code>sum(1, 2)(3);</code>这样 <code>sum(1, 2)(10);</code> 。就是，先把前 2 个参数的运算结果拿到后，再与第 3 个参数相加。<strong>这个就是函数柯里化的简单应用</strong></p><h3 id="柯里化实现"><a href="#柯里化实现" class="headerlink" title="柯里化实现"></a>柯里化实现</h3><p><code>sum(1, 2)(3);</code> 这样的写法，并不常见。拆开来看，<code>sum(1, 2)</code> 返回的应该还是个函数，因为后面还有 <code>(3)</code> 需要执行。其实你会发现<code>sum(1,2)</code>其实是不是返回的就是一个函数，然后函数在调用传参才返回的最终结果。 然后反过来，从最后一个参数，从右往左看，它的左侧必然是一个函数。以此类推，如果前面有 n 个()，那就是有 n 个函数返回了结果，只是返回的结果，还是一个函数。是不是有点递归的意思？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= fn.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fn</span>(...args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...moreArgs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">curried</span>(...args, ...moreArgs);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curriedAdd = <span class="title function_">curry</span>(add);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><strong>函数的柯里化，是 <code>JavaScript</code> 中函数式编程的一个重要概念。它返回的，是一个函数的函数。其实现方式，需要依赖参数以及递归，通过拆分参数的方式，来调用一个多参数的函数方法，以达到减少代码冗余，增加可读性的目的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout不准时?</title>
      <link href="//post/setTimeout%E4%B8%8D%E5%87%86%E6%97%B6.html"/>
      <url>//post/setTimeout%E4%B8%8D%E5%87%86%E6%97%B6.html</url>
      
        <content type="html"><![CDATA[<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>使用一个计数器来记录每次 <code>setTimeout</code> 的调用。设定的间隔时间乘以计数次数，理想情况下应等于预期的延迟。通过以下示例，可以检查我们计时器的准确性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">time</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> speed = <span class="number">50</span>, <span class="comment">// 间隔</span></span><br><span class="line">    count = <span class="number">1</span>; <span class="comment">// 计数</span></span><br><span class="line">  start = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">instance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ideal = count * speed,</span><br><span class="line">      real = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - start;</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count + <span class="string">&quot;理想值------------------------：&quot;</span>, ideal); <span class="comment">// 记录理想值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count + <span class="string">&quot;真实值------------------------：&quot;</span>, real); <span class="comment">// 记录理想值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> diff = real - ideal;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count + <span class="string">&quot;差值------------------------：&quot;</span>, diff); <span class="comment">// 差值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小于5执行</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">instance</span>();</span><br><span class="line">      &#125;, speed);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">instance</span>();</span><br><span class="line">  &#125;, speed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印-1"><a href="#打印-1" class="headerlink" title="打印 1"></a>打印 1</h4><p>2 理想值————————： 50<br>2 真实值————————： 59<br>2 差值————————： 9<br>3 理想值————————： 100<br>3 真实值————————： 126<br>3 差值————————： 26<br>4 理想值————————： 150<br>4 真实值————————： 180<br>4 差值————————： 30<br>5 理想值————————： 200<br>5 真实值————————： 232<br>5 差值————————： 32</p><p>我们可以在 <code>setTimeout</code> 执行之前加入额外的代码逻辑，然后再观察这个差值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">instance</span>();</span><br><span class="line">&#125;, speed);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a = <span class="number">1</span>, i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    a *= (i + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2 理想值————————： 50<br>2 真实值————————： 62<br>2 差值————————： 12<br>3 理想值————————： 100<br>3 真实值————————： 122<br>3 差值————————： 22<br>4 理想值————————： 150<br>4 真实值————————： 174<br>4 差值————————： 24<br>5 理想值————————： 200<br>5 真实值————————： 228<br>5 差值————————： 28</p><h2 id="setTimeout-系统时间补偿"><a href="#setTimeout-系统时间补偿" class="headerlink" title="setTimeout 系统时间补偿"></a>setTimeout 系统时间补偿</h2><p>当每一次定时器执行时后，都去获取系统的时间来进行修正，虽然每次运行可能会有误差，但是通过系统时间对每次运行的修复，能够让后面每一次时间都得到一个补偿。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">time</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> speed = <span class="number">50</span>, <span class="comment">// 间隔</span></span><br><span class="line">    count = <span class="number">1</span>; <span class="comment">// 计数</span></span><br><span class="line">  start = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">instance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ideal = count * speed,</span><br><span class="line">      real = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - start;</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count + <span class="string">&quot;理想值------------------------：&quot;</span>, ideal); <span class="comment">// 记录理想值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count + <span class="string">&quot;真实值------------------------：&quot;</span>, real); <span class="comment">// 记录理想值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> diff = real - ideal;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count + <span class="string">&quot;差值------------------------：&quot;</span>, diff); <span class="comment">// 差值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5次后不再执行</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">instance</span>();</span><br><span class="line">      &#125;, speed - diff);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">instance</span>();</span><br><span class="line">  &#125;, speed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3的provide和inject源码</title>
      <link href="//post/Vue3%E7%9A%84provide%E5%92%8Cinject%E6%BA%90%E7%A0%81.html"/>
      <url>//post/Vue3%E7%9A%84provide%E5%92%8Cinject%E6%BA%90%E7%A0%81.html</url>
      
        <content type="html"><![CDATA[<p><code>provide</code>和<code>inject</code>函数是如何实现数据多级传递的。</p><h2 id="看个demo"><a href="#看个demo" class="headerlink" title="看个demo"></a>看个demo</h2><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildDemo</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildDemo</span> <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, provide &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 提供响应式的值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="string">&quot;count&quot;</span>, count);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在父组件中使用<code>provide</code>为后代组件注入一个<code>count</code>响应式变量。</p><p>再来看看子组件<code>child.vue</code>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注入响应式的值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">inject</span>(<span class="string">&quot;count&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inject count is:&quot;</span>, count);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面的代码可以看到在孙子组件中使用<code>inject</code>函数拿到了父组件中注入的<code>count</code>响应式变量。</p><h2 id="provide函数"><a href="#provide函数" class="headerlink" title="provide函数"></a><code>provide</code>函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">provide</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!currentInstance) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!!(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>)) &#123;</span><br><span class="line">      <span class="title function_">warn$1</span>(<span class="string">`provide() can only be used inside setup().`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> provides = currentInstance.<span class="property">provides</span>;</span><br><span class="line">    <span class="keyword">const</span> parentProvides = currentInstance.<span class="property">parent</span> &amp;&amp; currentInstance.<span class="property">parent</span>.<span class="property">provides</span>;</span><br><span class="line">    <span class="keyword">if</span> (parentProvides === provides) &#123;</span><br><span class="line">      provides = currentInstance.<span class="property">provides</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(parentProvides);</span><br><span class="line">    &#125;</span><br><span class="line">    provides[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断<code>currentInstance</code>是否有值，如果没有就说明当前没有vue实例，也就是说当前调用provide函数的地方是不在setup函数中执行的，然后给出警告provide只能在setup中使用。</p><p>然后走进else逻辑中，首先从当前vue实例中取出存的<code>provides</code>属性对象。并且通过<code>currentInstance.parent.provides</code>拿到父组件vue实例中的<code>provides</code>属性对象。</p><p>这里为什么需要判断<code>if (parentProvides === provides)</code>呢？</p><p>因为在创建子组件时会默认使用父组件的<code>provides</code>属性对象作为父组件的<code>provides</code>属性对象。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">instance</span>: <span class="title class_">ComponentInternalInstance</span> = &#123;</span><br><span class="line">  <span class="attr">uid</span>: uid++,</span><br><span class="line">  vnode,</span><br><span class="line">  type,</span><br><span class="line">  parent,</span><br><span class="line">  <span class="attr">provides</span>: parent ? parent.<span class="property">provides</span> : <span class="title class_">Object</span>.<span class="title function_">create</span>(appContext.<span class="property">provides</span>),</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到如果有父组件，那么创建子组件实例的时候就直接使用父组件的<code>provides</code>属性对象。</p><p>所以这里在provide函数中需要判断<code>if (parentProvides === provides)</code>，如果相等说明当前父组件和子组件是共用的同一个<code>provides</code>属性对象。此时如果子组件调用了provide函数，说明子组件需要创建自己的<code>provides</code>属性对象。</p><p>并且新的属性对象还需要能够访问到父组件中注入的内容，所以这里以父组件的<code>provides</code>属性对象为原型去创建一个新的子组件的，这样在子组件中不仅能够访问到原型链中注入的<code>provides</code>属性对象，也能够访问到自己注入进去的<code>provides</code>属性对象。</p><p>最后就是执行<code>provides[key] = value</code>将当前注入的内容存到<code>provides</code>属性对象中。</p><h2 id="inject函数"><a href="#inject函数" class="headerlink" title="inject函数"></a>inject函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">inject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  key: InjectionKey&lt;any&gt; | string,</span></span><br><span class="line"><span class="params">  defaultValue?: unknown,</span></span><br><span class="line"><span class="params">  treatDefaultAsFactory = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// fallback to `currentRenderingInstance` so that this can be called in</span></span><br><span class="line">  <span class="comment">// a functional component</span></span><br><span class="line">  <span class="keyword">const</span> instance = currentInstance || currentRenderingInstance</span><br><span class="line"></span><br><span class="line">  <span class="comment">// also support looking up from app-level provides w/ `app.runWithContext()`</span></span><br><span class="line">  <span class="keyword">if</span> (instance || currentApp) &#123;</span><br><span class="line">    <span class="keyword">const</span> provides = currentApp</span><br><span class="line">      ? currentApp.<span class="property">_context</span>.<span class="property">provides</span></span><br><span class="line">      : instance</span><br><span class="line">        ? instance.<span class="property">parent</span> == <span class="literal">null</span></span><br><span class="line">          ? instance.<span class="property">vnode</span>.<span class="property">appContext</span> &amp;&amp; instance.<span class="property">vnode</span>.<span class="property">appContext</span>.<span class="property">provides</span></span><br><span class="line">          : instance.<span class="property">parent</span>.<span class="property">provides</span></span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (provides &amp;&amp; key <span class="keyword">in</span> provides) &#123;</span><br><span class="line">      <span class="keyword">return</span> provides[key]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> treatDefaultAsFactory &amp;&amp; <span class="title function_">isFunction</span>(defaultValue)</span><br><span class="line">        ? defaultValue.<span class="title function_">call</span>(instance &amp;&amp; instance.<span class="property">proxy</span>)</span><br><span class="line">        : defaultValue</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">`injection &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot; not found.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">`inject() can only be used inside setup() or functional components.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先拿到当前渲染的vue实例赋值给本地变量<code>instance</code>。接着使用<code>if (instance || currentApp)</code>判断当前是否有vue实例，如果没有看看有没有使用<code>app.runWithContext</code>手动注入了上下文，如果注入了那么<code>currentApp</code>就有值。</p><p>接着就是一串三元表达式，如果使用<code>app.runWithContext</code>手动注入了上下文，那么就优先从注入的上下文中取出<code>provides</code>属性对象。</p><p>如果没有那么就看当前组件是否满足<code>instance.parent == null</code>，也就是说当前组件是否是根节点。如果是根节点就取app中注入的<code>provides</code>属性对象。</p><p>如果上面的都不满足就去取父组件中注入的<code>provides</code>属性对象，前面我们讲过了在inject函数阶段，如果子组件内没有使用inject函数，那么就会直接使用父组件的<code>provides</code>属性对象。如果子组件中使用了inject函数，那么就以父组件的<code>provides</code>属性对象为原型去创建一个新的子组件的<code>provides</code>属性对象，从而形成一条原型链。</p><p>所以这里的孙子节点的<code>provides</code>属性对象中当然就能够拿到父组件中注入的<code>count</code>响应式变量，那么<code>if (provides &amp;&amp; key in provides)</code>就满足条件，最后会走到<code>return provides[key]</code>中将父组件中注入的响应式变量<code>count</code>原封不动的返回。</p><p>还有就是如果我们inject一个没有使用provide存入的key，并且传入了第二个参数<code>defaultValue</code>，此时<code>else if (arguments.length &gt; 1)</code>就满足条件了。</p><p>在里面会去判断是否传入第三个参数<code>treatDefaultAsFactory</code>，如果这个参数的值为true，说明第二个参数<code>defaultValue</code>可能是一个工厂函数。那么就执行<code>defaultValue.call(instance &amp;&amp; instance.proxy)</code>将<code>defaultValue</code>的当中工厂函数的执行结果进行返回。</p><p>如果第三个参数<code>treatDefaultAsFactory</code>的值不为true，那么就直接将第二个参数<code>defaultValue</code>当做默认值返回。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在创建vue组件实例时，子组件的<code>provides</code>属性对象会直接使用父组件的<code>provides</code>属性对象。如果在子组件中使用了<code>provide</code>函数，那么会以父组件的<code>provides</code>属性对象为原型创建一个新的<code>provides</code>属性对象，并且将<code>provide</code>函数中注入的内容塞到新的<code>provides</code>属性对象中，从而形成了原型链。</p><p>在孙子组件中，他的parent就是子组件。前面我们讲过了如果没有在组件内使用<code>provide</code>注入东西（很明显这里的子组件确实没有注入任何东西），那么就会直接使用他的父组件的<code>provides</code>属性对象，所以这里的子组件是直接使用的是父组件中的<code>provides</code>属性对象。所以在孙子组件中可以直接使用<code>inject</code>函数拿到父组件中注入的内容。</p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现画中画</title>
      <link href="//post/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E7%94%BB%E4%B8%AD%E7%94%BB.html"/>
      <url>//post/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E7%94%BB%E4%B8%AD%E7%94%BB.html</url>
      
        <content type="html"><![CDATA[<h2 id="Document-Picture-in-Picture-介绍"><a href="#Document-Picture-in-Picture-介绍" class="headerlink" title="Document Picture-in-Picture 介绍"></a>Document Picture-in-Picture 介绍</h2><p><strong>文档画中画</strong> (Document Picture-in-Picture, 本文简称 PiP)。</p><p>你可能已经在视频平台（如<code>腾讯视频</code>、<code>哔哩哔哩</code>等网页）见过这种效果：视频播放时，可以点击画中画后。无论你切换页面，它都始终显示在屏幕的最上层，</p><h3 id="HTML-基本代码结构"><a href="#HTML-基本代码结构" class="headerlink" title="HTML 基本代码结构"></a>HTML 基本代码结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document Picture-in-Picture API 示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#pipContent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pipContent&quot;</span>&gt;</span>这是一个将要放入画中画的 div 元素！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;clickBtn&quot;</span>&gt;</span>切换画中画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在这里写你的 JavaScript 代码</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="请求-PiP-窗口"><a href="#请求-PiP-窗口" class="headerlink" title="请求 PiP 窗口"></a>请求 PiP 窗口</h3><p><code>PiP</code> 的核心方法是 <code>window.documentPictureInPicture.requestWindow</code>。它是一个 <code>异步方法</code>，返回一个新创建的 <code>window</code> 对象。<br><code>PIP 窗口</code>可以将其看作一个新的网页，但它始终悬浮在屏幕上方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">getElementById</span>(<span class="string">&quot;clickBtn&quot;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取将要放入 PiP 窗口的 DOM 元素</span></span><br><span class="line">    <span class="keyword">const</span> pipContent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;pipContent&quot;</span>);</span><br><span class="line">    <span class="comment">// 请求创建一个 PiP 窗口</span></span><br><span class="line">    <span class="keyword">const</span> pipWindow = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="property">documentPictureInPicture</span>.<span class="title function_">requestWindow</span>(&#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">200</span>, <span class="comment">// 设置窗口的宽度</span></span><br><span class="line">      <span class="attr">height</span>: <span class="number">300</span>, <span class="comment">// 设置窗口的高度</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将原始元素添加到 PiP 窗口中</span></span><br><span class="line">    pipWindow.<span class="property">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(pipContent);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 实现关键字高亮效果</title>
      <link href="//post/vue%20%E5%AE%9E%E7%8E%B0%E5%85%B3%E9%94%AE%E5%AD%97%E9%AB%98%E4%BA%AE%E6%95%88%E6%9E%9C.html"/>
      <url>//post/vue%20%E5%AE%9E%E7%8E%B0%E5%85%B3%E9%94%AE%E5%AD%97%E9%AB%98%E4%BA%AE%E6%95%88%E6%9E%9C.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue-实现关键字高亮效果"><a href="#vue-实现关键字高亮效果" class="headerlink" title="vue 实现关键字高亮效果"></a>vue 实现关键字高亮效果</h2><p>这是啥子意思呢，就是类似于百度搜索，根据关键词搜索结果，搜索结果中，与关键词相同的字显示红色，仅此而已，没有什么大的功能。简单写一下demo。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ed-con&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;input&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 240px&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Please input&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;txt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> input = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> txt = <span class="title function_">ref</span>(<span class="string">&#x27;在古老的小镇边缘，有一间被岁月温柔抚摸过的木屋，它静静地伫立在一片绚烂的野花丛中。屋内，住着一位名叫苏婉的女子，她拥有一双能洞察人心的眼睛和一头如夜色般深邃的长发。每天黄昏，苏婉都会坐在窗边，手捧一本泛黄的书，眼神时而凝重，时而温柔，仿佛在与书中人物进行着跨越时空的对话。\n&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;\n&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;某天，一阵突如其来的风雨打破了小镇的宁静，也吹散了苏婉心中的平静。一位浑身湿透的青年男子闯入了她的世界，带着一身未解之谜。苏婉望着他，眼中闪过一抹不易察觉的光芒，她知道，自己的生活从此将不再平凡。两人在雨后的木屋里，围绕着炉火，开始编织起一段关于寻找、救赎与爱的故事，而窗外的世界，正悄悄地为这段奇遇添上一抹神秘的色彩。&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.ed-con</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  ::<span class="built_in">v-deep</span>(.ed-highlight) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就是怎么实现输入框输入数据之后，下面的文字中，与关键字相同的文字高亮成红色的，很简单，就一个方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">highlightText</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!input.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> txt.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`(<span class="subst">$&#123;input.value&#125;</span>)`</span>, <span class="string">&#x27;gi&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> highlightedText = txt.<span class="property">value</span>.<span class="title function_">replace</span>(regex, <span class="string">&#x27;&lt;span class=&quot;ed-highlight&quot;&gt;$1&lt;/span&gt;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> highlightedText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再调用一下这个方法就可以了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;highlightText()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瀑布流</title>
      <link href="//post/%E7%80%91%E5%B8%83%E6%B5%81.html"/>
      <url>//post/%E7%80%91%E5%B8%83%E6%B5%81.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是瀑布流"><a href="#什么是瀑布流" class="headerlink" title="什么是瀑布流"></a>什么是瀑布流</h2><p>瀑布流布局，作为一种现代网页设计中的创新布局方式，以其独特的视觉风格和流畅的用户体验在众多网站设计中脱颖而出。这种布局模式被形象地称为“瀑布流”</p><h4 id="瀑布流布局的核心特征"><a href="#瀑布流布局的核心特征" class="headerlink" title="瀑布流布局的核心特征"></a>瀑布流布局的核心特征</h4><p><strong>多列等宽不等高</strong>：瀑布流布局以多列的形式展现内容，每列宽度保持一致，而高度则根据所容纳内容的大小动态调整，形成错落有致的视觉效果。</p><p><strong>动态加载与无限滚动</strong>：用户在浏览过程中，随着滚动页面，新的内容块会自动加载，实现了“无尽”的内容流，减少了分页操作，提升了浏览连贯性。</p><p><strong>视觉吸引力</strong>：尤其擅长展示图片或视觉元素丰富的媒体内容，为用户提供了沉浸式的浏览体验，增加了页面的观赏性和互动性。</p><h4 id="设计瀑布流布局"><a href="#设计瀑布流布局" class="headerlink" title="设计瀑布流布局"></a>设计瀑布流布局</h4><ol><li>先获取屏幕的大小</li><li>获取图片的宽度</li><li>确定第一行能放几张图（n张）</li><li>操作第 n+1 张 摆放它的位置，将其放在高度最小的那一列</li><li>获取每一列的高度</li><li>放入图片后，更新这一列的高度</li></ol><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box-img</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aaa</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-img&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ···</span><br><span class="line">    ···</span><br><span class="line">    ···</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-img&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/9.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-img&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/10.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">imgLocation</span>(<span class="string">&#x27;container&#x27;</span>, <span class="string">&#x27;box&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">imgLocation</span>(<span class="params">parent, child</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> cParent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(parent)</span><br><span class="line">      <span class="keyword">var</span> cChild = cParent.<span class="title function_">getElementsByClassName</span>(child)</span><br><span class="line">      <span class="keyword">var</span> screenWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line">      <span class="keyword">var</span> imgWidth = cChild[<span class="number">0</span>].<span class="property">offsetWidth</span></span><br><span class="line">      <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(screenWidth / imgWidth)</span><br><span class="line">      cParent.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;imgWidth * num&#125;</span>px`</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 操作第 num+1 张</span></span><br><span class="line">      <span class="keyword">var</span> boxHeightArr = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cChild.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; num) &#123;  <span class="comment">// 第一行</span></span><br><span class="line">          boxHeightArr.<span class="title function_">push</span>(cChild[i].<span class="property">offsetHeight</span>)</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 找数组最小值</span></span><br><span class="line">          <span class="keyword">var</span> minHeight = <span class="title class_">Math</span>.<span class="title function_">min</span>(...boxHeightArr)  </span><br><span class="line">          <span class="keyword">var</span> minIndex = boxHeightArr.<span class="title function_">indexOf</span>(minHeight) </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 摆放图片</span></span><br><span class="line">          cChild[i].<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">          cChild[i].<span class="property">style</span>.<span class="property">top</span> = minHeight + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">          cChild[i].<span class="property">style</span>.<span class="property">left</span> = cChild[minIndex].<span class="property">offsetLeft</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 更新这一列的高度</span></span><br><span class="line">          boxHeightArr[minIndex] = boxHeightArr[minIndex] + cChild[i].<span class="property">offsetHeight</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>window.onload = function() &#123;&#125;</code>js 写在头部，加上这个就不影响了，之后的代码写在里面就可以了；</p><p><code>imgLocation(&#39;container&#39;, &#39;box&#39;) </code>  运用封装的思维</p><p><code>.offsetWidth</code>  获取宽度</p><p><code>.offsetHeight</code> 获取高度</p><p><code>.offsetLeft</code>   获取距离父元素的左侧距离</p><p><code>.offsetTop</code>    获取距离父元素的顶部距离</p><p><code>...boxHeightArr</code>   …是解构数组的操作</p><p><code>indexof(arr)</code>      会返回数组的下标</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端通信 CustomEvent</title>
      <link href="//post/%E5%89%8D%E7%AB%AF%E9%80%9A%E4%BF%A1%20CustomEvent.html"/>
      <url>//post/%E5%89%8D%E7%AB%AF%E9%80%9A%E4%BF%A1%20CustomEvent.html</url>
      
        <content type="html"><![CDATA[<p>通过简单的几行代码，我们能够轻松创建和触发自定义事件，从而降低特殊场景下的开发风险，并且提升我们的开发效率。而且它可以非常容易的写到 React 和 Vue 项目中，</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>看看如何利用 CustomEvent 构建一个全局广播推送消息的机制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并触发自定义事件</span></span><br><span class="line"><span class="keyword">const</span> customEvent = <span class="title function_">w</span>(<span class="string">&#x27;yourEventName&#x27;</span>, &#123;  </span><br><span class="line">  <span class="attr">detail</span>: &#123; <span class="attr">key</span>: <span class="string">&#x27;myKey&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;newValue&#x27;</span>&#125; <span class="comment">// 自定义数据</span></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(customEvent); <span class="comment">// 推送消息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们需要设置接收端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听自定义事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;yourEventName&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; key, value &#125; = event.<span class="property">detail</span>;</span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&#x27;myKey&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Detected localStorage change:&#x27;</span>, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Vue-组件之间进行通信"><a href="#Vue-组件之间进行通信" class="headerlink" title="Vue 组件之间进行通信"></a>Vue 组件之间进行通信</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updateUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建并触发自定义事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> customEvent = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;userUpdated&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">detail</span>: &#123; <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">username</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(customEvent);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Notification.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;userUpdated&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; name &#125; = event.<span class="property">detail</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">`User name has been changed to <span class="subst">$&#123;name&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;userUpdated&#x27;</span>, <span class="variable language_">this</span>.<span class="property">eventListener</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Vue 中实现20MB图片上传压缩到10KB</title>
      <link href="//post/%E5%9C%A8%20Vue%20%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B9%B6%E9%99%90%E5%88%B6%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E4%B8%BA%2010KB.html"/>
      <url>//post/%E5%9C%A8%20Vue%20%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B9%B6%E9%99%90%E5%88%B6%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E4%B8%BA%2010KB.html</url>
      
        <content type="html"><![CDATA[<p>在现代 Web 应用中，文件上传是一个常见的功能，尤其是在用户需要上传图片时。然而，上传的文件往往会占用较大的存储空间，影响性能和用户体验。因此，限制文件大小是一个重要的需求。在这篇文章中，我们将介绍如何在 Vue.js 应用中实现文件上传，并将上传压缩到 10KB</p><h4 id="创建文件上传组件"><a href="#创建文件上传组件" class="headerlink" title="创建文件上传组件"></a>创建文件上传组件</h4><p>我们首先需要创建一个简单的文件上传组件，用户可以通过这个组件选择图片文件。以下是基本的组件结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleFileUpload&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageSrc&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Preview&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个模板包含一个文件输入框和一个用于显示图片预览的 img 标签。</p><h4 id="处理文件上传"><a href="#处理文件上传" class="headerlink" title="处理文件上传"></a>处理文件上传</h4><p>接下来，我们需要在组件中定义文件上传的逻辑。我们将使用 FileReader API 来读取文件，并通过 canvas 进行图片的压缩处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">imageSrc</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleFileUpload</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> file = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="keyword">const</span> compressedFile = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">compressImage</span>(file);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(compressedFile);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>handleFileUpload 方法会在用户选择文件后被调用。我们首先检查用户是否选择了文件，如果选择了，则调用 compressImage 方法进行压缩处理。</p><h4 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h4><p>压缩图片的核心逻辑在于 compressImage 方法。该方法会创建一个新的 canvas 元素，并根据最大宽高对图片进行缩放，然后将其压缩到 10KB 以内。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">      <span class="title function_">compressImage</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        reader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">          img.<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">          img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">MAX_WIDTH</span> = <span class="number">100</span>; <span class="comment">// 最大宽度</span></span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">MAX_HEIGHT</span> = <span class="number">100</span>; <span class="comment">// 最大高度</span></span><br><span class="line">            <span class="keyword">let</span> width = img.<span class="property">width</span>;</span><br><span class="line">            <span class="keyword">let</span> height = img.<span class="property">height</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算新的宽高</span></span><br><span class="line">            <span class="keyword">if</span> (width &gt; height) &#123;</span><br><span class="line">              <span class="keyword">if</span> (width &gt; <span class="variable constant_">MAX_WIDTH</span>) &#123;</span><br><span class="line">                height *= <span class="variable constant_">MAX_WIDTH</span> / width;</span><br><span class="line">                width = <span class="variable constant_">MAX_WIDTH</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (height &gt; <span class="variable constant_">MAX_HEIGHT</span>) &#123;</span><br><span class="line">                width *= <span class="variable constant_">MAX_HEIGHT</span> / height;</span><br><span class="line">                height = <span class="variable constant_">MAX_HEIGHT</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            canvas.<span class="property">width</span> = width;</span><br><span class="line">            canvas.<span class="property">height</span> = height;</span><br><span class="line">            ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 压缩为 10KB</span></span><br><span class="line">            canvas.<span class="title function_">toBlob</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (blob.<span class="property">size</span> &gt; <span class="number">10</span> * <span class="number">1024</span>) &#123; <span class="comment">// 10KB</span></span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Compressed file exceeds 10KB.&#x27;</span>));</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(blob);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">imageSrc</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob); <span class="comment">// 显示预览</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, <span class="string">&#x27;image/jpeg&#x27;</span>, <span class="number">0.7</span>); <span class="comment">// 设定压缩质量</span></span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中，我们首先读取文件并创建一个图像对象。在图像加载完成后，我们创建一个 canvas，设置其大小，并将图像绘制到画布上。接下来，我们使用 canvas.toBlob 方法将画布内容转换为 Blob 对象，并检查其大小是否小于 10KB。如果压缩成功，我们将 Blob 对象转换为 URL 以供预览。</p><h4 id="预览与用户反馈"><a href="#预览与用户反馈" class="headerlink" title="预览与用户反馈"></a>预览与用户反馈</h4><p>在处理完文件上传和压缩后，我们可以通过绑定 imageSrc 来显示上传后的图片预览。这样用户就可以实时查看他们上传的文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageSrc&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Preview&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过以上步骤，我们成功创建了一个简单的文件上传组件，能够有效地限制上传文件的大小为 10KB。这种处理方式不仅能保证上传的文件符合大小要求，同时也能在一定程度上保证上传的速度和用户体验。</p><p>如果你需要支持其他类型的文件或者扩展更多功能，可以根据实际需求对代码进行相应的修改。这种方法也可以作为其他文件处理功能的基础，帮助你在 Vue 应用中实现更复杂的文件上传逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3源码——render函数</title>
      <link href="//post/Vue3%E6%BA%90%E7%A0%81%E2%80%94%E2%80%94render%E5%87%BD%E6%95%B0.html"/>
      <url>//post/Vue3%E6%BA%90%E7%A0%81%E2%80%94%E2%80%94render%E5%87%BD%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<p>在了解vue render函数之前, 需要先了解下Vue的整体流程</p><p>应该可以理解一个Vue组件是如何运行起来的.</p><ul><li>模板通过编译生成AST树</li><li>AST树生成Vue的render渲染函数</li><li>render渲染函数结合数据生成vNode(Virtual DOM Node)树</li><li>Diff和Patch后生新的UI界面(真实DOM渲染)</li></ul><p>我们需要了解以下几个概念:</p><ul><li>模板, Vue模板是纯HTML, 基于Vue的模板语法, 可以比较方便的处理数据和UI界面的关系</li><li>AST, 即Abstract Syntax Tree的简称, Vue将HTML模板解析为AST,并对AST进行一些优化的标记处理, 提取最大的静态树,以使Virtual DOM直接跳过后面的Diff</li><li>render渲染函数, render渲染函数是用来生成Virtual DOM的. Vue推荐使用模板来构建我们的应用程序, 在底层实现中Vue最终还是会将模板编译成渲染函数. 因此, 若我们想要得到更好的控制, 可以直接写渲染函数.(<strong>重点</strong>)</li><li>Virtual DOM, 虚拟DOM</li><li>Watcher, 每个Vue组件都有一个对应的<code>watcher</code>, 它会在组件<code>render</code>时收集组件所依赖的数据, 并在依赖有更新时, 触发组件重新渲染, Vue会自动优化并更新需要更新DOM</li></ul><h4 id="vue单文件的实现"><a href="#vue单文件的实现" class="headerlink" title=".vue单文件的实现"></a>.vue单文件的实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;anchored-heading&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">level</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="render函数的实现"><a href="#render函数的实现" class="headerlink" title="render函数的实现"></a>render函数的实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;anchored-heading&#x27;, &#123;</span><br><span class="line">    render: function (createElement) &#123;</span><br><span class="line">        return createElement(</span><br><span class="line">            &#x27;h&#x27; + this.level,   // tag name 标签名称</span><br><span class="line">            this.$slots.default // 子组件中的阵列</span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        level: &#123;</span><br><span class="line">            type: Number,</span><br><span class="line">            required: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="createElement解析过程"><a href="#createElement解析过程" class="headerlink" title="createElement解析过程"></a>createElement解析过程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SIMPLE_NORMALIZE</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ALWAYS_NORMALIZE</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span> (context, tag, data, children, normalizationType, alwaysNormalize) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 兼容不传data的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data) || <span class="title function_">isPrimitive</span>(data)) &#123;</span><br><span class="line">        normalizationType = children</span><br><span class="line">        children = data</span><br><span class="line">        data = <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果alwaysNormalize是true</span></span><br><span class="line">    <span class="comment">// 那么normalizationType应该设置为常量ALWAYS_NORMALIZE的值</span></span><br><span class="line">    <span class="keyword">if</span> (alwaysNormalize) normalizationType = <span class="variable constant_">ALWAYS_NORMALIZE</span></span><br><span class="line">        <span class="comment">// 调用_createElement创建虚拟节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_createElement</span>(context, tag, data, children, normalizationType)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_createElement</span> (context, tag, data, children, normalizationType) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 如果存在data.__ob__，说明data是被Observer观察的数据</span></span><br><span class="line"><span class="comment">        * 不能用作虚拟节点的data</span></span><br><span class="line"><span class="comment">        * 需要抛出警告，并返回一个空节点</span></span><br><span class="line"><span class="comment">        * </span></span><br><span class="line"><span class="comment">        * 被监控的data不能被用作vnode渲染的数据的原因是：</span></span><br><span class="line"><span class="comment">        * data在vnode渲染过程中可能会被改变，这样会触发监控，导致不符合预期的操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (data &amp;&amp; data.<span class="property">__ob__</span>) &#123;</span><br><span class="line">            process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`Avoid using observed data object as vnode data: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>\n`</span> +</span><br><span class="line">            <span class="string">&#x27;Always create fresh vnode data objects in each render!&#x27;</span>,</span><br><span class="line">            context</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">createEmptyVNode</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当组件的is属性被设置为一个falsy的值</span></span><br><span class="line">        <span class="comment">// Vue将不会知道要把这个组件渲染成什么</span></span><br><span class="line">        <span class="comment">// 所以渲染一个空节点</span></span><br><span class="line">        <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">createEmptyVNode</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 作用域插槽</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(children) &amp;&amp; <span class="keyword">typeof</span> children[<span class="number">0</span>] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            data = data || &#123;&#125;</span><br><span class="line">            data.<span class="property">scopedSlots</span> = &#123; <span class="attr">default</span>: children[<span class="number">0</span>] &#125;</span><br><span class="line">            children.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据normalizationType的值，选择不同的处理方法</span></span><br><span class="line">        <span class="keyword">if</span> (normalizationType === <span class="variable constant_">ALWAYS_NORMALIZE</span>) &#123;</span><br><span class="line">            children = <span class="title function_">normalizeChildren</span>(children)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (normalizationType === <span class="variable constant_">SIMPLE_NORMALIZE</span>) &#123;</span><br><span class="line">            children = <span class="title function_">simpleNormalizeChildren</span>(children)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> vnode, ns</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果标签名是字符串类型</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="title class_">Ctor</span></span><br><span class="line">            <span class="comment">// 获取标签名的命名空间</span></span><br><span class="line">            ns = config.<span class="title function_">getTagNamespace</span>(tag)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是否为保留标签</span></span><br><span class="line">            <span class="keyword">if</span> (config.<span class="title function_">isReservedTag</span>(tag)) &#123;</span><br><span class="line">                <span class="comment">// 如果是保留标签,就创建一个这样的vnode</span></span><br><span class="line">                vnode = <span class="keyword">new</span> <span class="title class_">VNode</span>(</span><br><span class="line">                    config.<span class="title function_">parsePlatformTagName</span>(tag), data, children,</span><br><span class="line">                    <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不是保留标签，那么我们将尝试从vm的components上查找是否有这个标签的定义</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="title class_">Ctor</span> = <span class="title function_">resolveAsset</span>(context.<span class="property">$options</span>, <span class="string">&#x27;components&#x27;</span>, tag))) &#123;</span><br><span class="line">                <span class="comment">// 如果找到了这个标签的定义，就以此创建虚拟组件节点</span></span><br><span class="line">                vnode = <span class="title function_">createComponent</span>(<span class="title class_">Ctor</span>, data, context, children, tag)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 兜底方案，正常创建一个vnode</span></span><br><span class="line">                vnode = <span class="keyword">new</span> <span class="title class_">VNode</span>(</span><br><span class="line">                    tag, data, children,</span><br><span class="line">                    <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当tag不是字符串的时候，我们认为tag是组件的构造类</span></span><br><span class="line">        <span class="comment">// 所以直接创建</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            vnode = <span class="title function_">createComponent</span>(tag, data, context, children)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有vnode</span></span><br><span class="line">        <span class="keyword">if</span> (vnode) &#123;</span><br><span class="line">            <span class="comment">// 如果有namespace，就应用下namespace，然后返回vnode</span></span><br><span class="line">            <span class="keyword">if</span> (ns) <span class="title function_">applyNS</span>(vnode, ns)</span><br><span class="line">            <span class="keyword">return</span> vnode</span><br><span class="line">        <span class="comment">// 否则，返回一个空节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">createEmptyVNode</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3源码——h函数</title>
      <link href="//post/Vue3%E6%BA%90%E7%A0%81%E2%80%94%E2%80%94h%E5%87%BD%E6%95%B0.html"/>
      <url>//post/Vue3%E6%BA%90%E7%A0%81%E2%80%94%E2%80%94h%E5%87%BD%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<p>Vue和React这类框架比起远古时期的jQuery，最大的改变就是采用了<code>MVVM架构</code>。</p><p>而MVVM架构的核心，则是<code>虚拟DOM</code>。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><p>说到虚拟DOM，先得说起<strong>真实DOM</strong>。真实的DOM就是一颗<strong>HTML树</strong>，里面包含了<code>节点</code>、<code>属性</code>（<strong>class</strong>、<strong>id</strong>、<strong>style</strong>等）、<code>子节点</code>信息。</p><p>例如这样的DOM节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虚拟的DOM也要包括和真实DOM一样的信息。区别在于，它用<strong>JS对象</strong>来表示</p><p>例如刚才的DOM节点，用JS可以这样表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">        <span class="attr">class</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&quot;hello world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这个vnode对象，用了<code>type</code>、<code>props</code>和<code>children</code>分别表示了这个真实DOM节点的<code>类型</code>（div）、<code>属性</code>（id为app，class为test）以及<code>子节点</code>（字符串hello world）。看着这样格式的JS对象，我们也可以很容易地推理得到一个真实的DOM节点。我们把这样的一个对象称之为<strong>虚拟DOM</strong>。</p><h3 id="h函数"><a href="#h函数" class="headerlink" title="h函数"></a>h函数</h3><p>在Vue源码中，虚拟DOM是由<code>h函数</code>生成的。生成时同样可以传入<code>节点类型</code>、<code>属性</code>以及<code>子节点信息</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">id</span>: <span class="string">&quot;app&quot;</span>, <span class="attr">class</span>: <span class="string">&quot;test&quot;</span> &#125;, <span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><p>尝试打印这个h函数生成的vnode，内部信息比较丰富，用注释标注了一些核心的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 是否是VNode对象</span></span><br><span class="line">        <span class="string">&quot;__v_isVNode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;__v_skip&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 节点类型</span></span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">        <span class="comment">// 节点属性</span></span><br><span class="line">        <span class="string">&quot;props&quot;</span>: &#123; <span class="string">&quot;class&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;app&quot;</span> &#125;,</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;ref&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;scopeId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;slotScopeIds&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="comment">// 子节点</span></span><br><span class="line">        <span class="string">&quot;children&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">        <span class="string">&quot;component&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;suspense&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;ssContent&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;ssFallback&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;dirs&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;transition&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;el&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;anchor&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;targetAnchor&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;staticCount&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;shapeFlag&quot;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">&quot;patchFlag&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;dynamicProps&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;dynamicChildren&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;appContext&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="h函数框架"><a href="#h函数框架" class="headerlink" title="h函数框架"></a>h函数框架</h2><h3 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h3><p>对于h函数，我们知道应该包括三个参数</p><ul><li>节点类型type</li><li>属性props（可选）</li><li>子节点children（可选）</li></ul><p>考虑到属性和子节点都是<strong>可选参数</strong>，因此要针对入参数量和类型做一些判断，大概的规则如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">type: any, propsOrChildren?: any, children?: any</span>): <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> l = <span class="variable language_">arguments</span>.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 两个参数，不知道是props没传还是children没传</span></span><br><span class="line">  <span class="keyword">if</span> (l == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(propsOrChildren) &amp;&amp; !<span class="title function_">isArray</span>(propsOrChildren)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isVNode</span>(propsOrChildren)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createVNode</span>(type, <span class="literal">null</span>, [propsOrChildren]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createVNode</span>(type, propsOrChildren, []);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createVNode</span>(type, <span class="literal">null</span>, propsOrChildren);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 三个及以上的参数，肯定是props和children都有</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      children = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l === <span class="number">3</span> &amp;&amp; <span class="title function_">isVNode</span>(children)) &#123;</span><br><span class="line">      children = [children];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createVNode</span>(type, propsOrChildren, children);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于<strong>是否为vnode</strong>的判断，直接根据<code>__v_isVNode属性</code>就可得知</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isVNode</span>(<span class="params">value: any</span>): value is <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value ? value.<span class="property">__v_isVNode</span> === <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体框架出来了，接下来vnode的生成，主要就是<code>createVNode</code>这个方法了</p><h3 id="vnode的类型"><a href="#vnode的类型" class="headerlink" title="vnode的类型"></a>vnode的类型</h3><p>关于DOM节点，我们大概可以分成这样一些类别</p><ul><li>标准节点：div、h1等常规标签</li><li>注释节点</li><li>Fragment节点</li><li>组件</li><li>……</li></ul><p>那么，相对的，vnode也会区分一些节点类型。</p><p>查看Vue源码可以得知，里面包含了<strong>文本节点</strong><code>Text</code>、<strong>片段节点</strong><code>Fragment</code>、<strong>DOM节点</strong><code>Element</code>、<strong>组件节点</strong><code>Component</code>、<strong>注释节点</strong><code>Comment</code>等等。</p><p>此外，对于<code>children</code>来说，可能是<strong>一个</strong>，也可能是<strong>数组</strong>，甚至是<strong>对象</strong>、<strong>函数</strong>等等多种不同类型。</p><p>源码中，为了区分不同的节点，使用了<code>shapeFlag</code>，而且这个值还用二进制位进行计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum <span class="title class_">ShapeFlags</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * type = Element</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable constant_">ELEMENT</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 函数组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable constant_">FUNCTIONAL_COMPONENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 有状态（响应数据）组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable constant_">STATEFUL_COMPONENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * children = Text</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable constant_">TEXT_CHILDREN</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * children = Array</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable constant_">ARRAY_CHILDREN</span> = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * children = slot</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable constant_">SLOTS_CHILDREN</span> = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件：有状态（响应数据）组件 | 函数组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable constant_">COMPONENT</span> = <span class="title class_">ShapeFlags</span>.<span class="property">STATEFUL_COMPONENT</span> | <span class="title class_">ShapeFlags</span>.<span class="property">FUNCTIONAL_COMPONENT</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="h函数实现"><a href="#h函数实现" class="headerlink" title="h函数实现"></a>h函数实现</h2><h3 id="element节点-文本children"><a href="#element节点-文本children" class="headerlink" title="element节点+文本children"></a>element节点+文本children</h3><p>h函数最简单的用法是创建一个有tag名称的节点，子节点是文本。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p>为了实现<code>VNode</code>的构建，需要先构建<code>createVNode</code>方法，接收<code>type</code>、<code>props</code>、<code>children</code>这三个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="attr">__v_isVNode</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">type</span>: any</span><br><span class="line">  <span class="attr">props</span>: any</span><br><span class="line">  <span class="attr">children</span>: any</span><br><span class="line">  <span class="attr">shapeFlag</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createVNode</span>(<span class="params">type, props, children</span>): <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="comment">// 这里先处理文本类型，其他的shapeFlag先不处理</span></span><br><span class="line">  <span class="keyword">const</span> shapeFlag = <span class="title function_">isString</span>(type) ? <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span> : <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createBaseVNode</span>(type, props, children, shapeFlag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成了<code>shapeFlag</code>后，要先创建VNode的一些基本属性，源码中用的就是<code>createBaseVNode</code>方法，并且在这之后使用<code>normalizeChildren</code>标准化children的类型（即使用<strong>位或运算</strong>得到一个shapeFlag值）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建基础vnode</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createBaseVNode</span>(<span class="params">type, props, children, shapeFlag</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vnode = &#123;</span><br><span class="line">    <span class="attr">__v_isVNode</span>: <span class="literal">true</span>,</span><br><span class="line">    type,</span><br><span class="line">    props,</span><br><span class="line">    shapeFlag,</span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="title class_">VNode</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">normalizeChildren</span>(vnode, children);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeChildren</span>(<span class="params">vnode: VNode, children: unknown</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> type = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (children === <span class="literal">null</span>) &#123;</span><br><span class="line">    children = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isArray</span>(children)) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 数组类型children处理</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> children === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 对象类型的children处理</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(children)) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 函数类型的children处理</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    children = <span class="title class_">String</span>(children);</span><br><span class="line">    type = <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vnode.<span class="property">children</span> = children;</span><br><span class="line">  vnode.<span class="property">shapeFlag</span> |= type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们可以通过<code>h函数</code>拿到<code>tag</code>为<code>string</code>（例如<code>div</code>、<code>p</code>等），且<code>children</code>内容是<code>text</code>的vnode值了，和源码的核心内容是一致的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vnode); <span class="comment">// shapeFlag是9，children是hello world</span></span><br></pre></td></tr></table></figure><h3 id="element节点-数组children"><a href="#element节点-数组children" class="headerlink" title="element节点+数组children"></a>element节点+数组children</h3><p>相比于上一个节点类型，这个的区别就是children不再是一个节点，而是<strong>多个</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, [<span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;p1&quot;</span>), <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;p2&quot;</span>), <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;p3&quot;</span>)]);</span><br></pre></td></tr></table></figure><p>其中每一个节点的解析就是刚才<code>element+text</code>这种组合，而且这几个节点会先被处理成<code>VNode</code>，唯一的区别是整体<code>div</code>这个节点</p><p>查看源码可以知道，我们只需要在最后生成<code>div</code>的<code>VNode</code>的时候提供一个<code>type</code>数值就行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeChildren</span>(<span class="params">vnode: VNode, children: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isArray</span>(children)) &#123;</span><br><span class="line">    <span class="keyword">type</span> = <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候这个<code>VNode</code>的打印结果就和源码核心一致了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, [<span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;p1&quot;</span>), <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;p2&quot;</span>), <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;p3&quot;</span>)]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vnode); <span class="comment">// shapeFlag是17，children也是vnode节点，shapeFlag都是9</span></span><br></pre></td></tr></table></figure><p>从这里不难发现，VNode中一个很关键的属性是<code>shapeFlag</code>，正如名字一样，它描述了<strong>虚拟DOM节点的形状</strong>，而这个形状包括了<strong>父节点类型</strong>和<strong>子节点类型&#x2F;形状</strong>，其中：</p><ul><li>createBaseVNode：提供了父节点的类型</li><li>normalizeChildren：提供了子节点的类型和形状</li></ul><h3 id="组件Component"><a href="#组件Component" class="headerlink" title="组件Component"></a>组件Component</h3><p>首先要明确一个问题：在Vue中，组件的本质是<strong>对象&#x2F;函数</strong></p><p>所以实际上在Vue中写的组件，如果需要渲染的话，要用<strong>对象</strong>包裹，其中包含一个<code>render</code>方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vnode1 = <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;this is component&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> vnode1;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vnode2 = <span class="title function_">h</span>(component);</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(vnode2, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>));</span><br></pre></td></tr></table></figure><p>按照之前的h函数实现和理解，其实我们可以在component的<code>render</code>中直接返回一个<code>VNode对象</code>，<code>render方法</code>直接给一个VNode对象，也能达到一样的效果，主要的注意点就是<code>shapeFlag值</code>要保持和源码一致</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">v__is_vnode</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: <span class="string">&quot;this is component&quot;</span>,</span><br><span class="line">      <span class="attr">shapeFlag</span>: <span class="number">9</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(&#123;</span><br><span class="line">  <span class="attr">v__is_vnode</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">type</span>: component,</span><br><span class="line">  <span class="attr">shapeFlag</span>: <span class="number">4</span></span><br><span class="line">&#125;, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>));</span><br></pre></td></tr></table></figure><p>所以只需要注意处理一下<code>type</code>和<code>shapeFlag</code>值，就可以完成组件component的h函数了，只要在<code>createVNode</code>中修改一行即可</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createVNode</span>(<span class="params"><span class="keyword">type</span>, props, children</span>): <span class="title class_">VNode</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">const</span> shapeFlag = <span class="title function_">isString</span>(<span class="keyword">type</span>)</span><br><span class="line">    ? <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span></span><br><span class="line">    : <span class="title function_">isObject</span>(<span class="keyword">type</span>)</span><br><span class="line">    ? <span class="title class_">ShapeFlags</span>.<span class="property">STATEFUL_COMPONENT</span></span><br><span class="line">    : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照之前的代码，最后生成的VNode里的children会变成”undefined”，其实是<code>normalizeChildren</code>里面的判断条件过于严苛了，把<code>===</code>改成<code>==</code>即可</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeChildren</span>(<span class="params">vnode: VNode, children: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">if</span> (children == <span class="literal">null</span>) &#123;</span><br><span class="line">    children = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他一些简单节点"><a href="#其他一些简单节点" class="headerlink" title="其他一些简单节点"></a>其他一些简单节点</h3><p>这里的简单节点包括：</p><ul><li>纯文本<code>Text</code></li><li>注释<code>Comment</code></li><li>片段<code>Fragment</code></li></ul><p>查看源码可以发现，用h函数构建的这些节点的<code>type</code>都是<code>Symbol类型</code>，<code>shapeFlag</code>都是8</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnodeText = <span class="title function_">h</span>(<span class="title class_">Text</span>, <span class="string">&quot;this is text&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vnodeComment = <span class="title function_">h</span>(<span class="title class_">Comment</span>, <span class="string">&quot;this is comment&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vnodeFragment = <span class="title function_">h</span>(<span class="title class_">Fragment</span>, <span class="string">&quot;this is fragment&quot;</span>);</span><br></pre></td></tr></table></figure><p>相比于之前的代码，我们只需要考虑<code>type</code>的问题，这里直接创建几个常量处理即可</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Fragment</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;Fragment&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Text</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;Text&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Comment</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;Comment&quot;</span>);</span><br></pre></td></tr></table></figure><p>处理完之后，h函数对这些简单节点的输出就和源码核心保持一致了</p><h2 id="class和style的增强处理"><a href="#class和style的增强处理" class="headerlink" title="class和style的增强处理"></a>class和style的增强处理</h2><p>Vue中对<code>class</code>和<code>style</code>，支持使用<strong>数组&#x2F;对象</strong>，动态绑定值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">class</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;red&#x27;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="string">&#x27;improve class&#x27;</span>);</span><br></pre></td></tr></table></figure><p>按照上面的代码，可以拿到一个带有class为red的div</p><p>阅读源码得知，这个增强处理需要添加一个<code>normalizeClass方法</code>，方法本质上也是对class对象做一个<strong>遍历</strong>，针对<code>string</code>&#x2F;<code>array</code>&#x2F;<code>object</code>做不同的处理方式，最后拼接成<code>string</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeClass</span>(<span class="params">value: <span class="built_in">unknown</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isString</span>(value)) &#123;</span><br><span class="line">    res = value;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; value.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> normalized = <span class="title function_">normalizeClass</span>(value[i]);</span><br><span class="line">      <span class="keyword">if</span> (normalized) &#123;</span><br><span class="line">        res += normalized + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isObject</span>(value)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> value <span class="keyword">as</span> <span class="built_in">object</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((value <span class="keyword">as</span> <span class="built_in">object</span>)[name]) &#123;</span><br><span class="line">        res += name + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">trim</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createVNode</span>(<span class="params"><span class="keyword">type</span>, props, children</span>): <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (props) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; <span class="attr">class</span>: klass, style &#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (klass &amp;&amp; !<span class="title function_">isString</span>(klass)) &#123;</span><br><span class="line">      props.<span class="property">class</span> = <span class="title function_">normalizeClass</span>(klass);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>style的处理逻辑上和class一致</p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.5 useId</title>
      <link href="//post/Vue3.5%20useId.html"/>
      <url>//post/Vue3.5%20useId.html</url>
      
        <content type="html"><![CDATA[<h2 id="useId的作用"><a href="#useId的作用" class="headerlink" title="useId的作用"></a>useId的作用</h2><p>他的作用也是生成唯一ID，同一个Vue应用里面每次调用<code>useId</code>生成的ID都不同。</p><p>使用方法也很简单，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useId &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id0 = <span class="title function_">useId</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id0); <span class="comment">// v-0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id1 = <span class="title function_">useId</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1); <span class="comment">// v-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id2 = <span class="title function_">useId</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id2); <span class="comment">// v-2</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="useId是如何实现的"><a href="#useId是如何实现的" class="headerlink" title="useId是如何实现的"></a>useId是如何实现的</h2><p>来看看<code>useId</code>的源码，非常简单！！简化后的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useId</span>(<span class="params"></span>): string &#123;</span><br><span class="line">  <span class="keyword">const</span> i = <span class="title function_">getCurrentInstance</span>()</span><br><span class="line">  <span class="keyword">if</span> (i) &#123;</span><br><span class="line">    <span class="keyword">return</span> (i.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">idPrefix</span> || <span class="string">&#x27;v&#x27;</span>) + <span class="string">&#x27;-&#x27;</span> + i.<span class="property">ids</span>[<span class="number">0</span>] + i.<span class="property">ids</span>[<span class="number">1</span>]++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>生成的ID分为三部分：</p><ul><li><p>第一部分为前缀：<a href="https://link.juejin.cn/?target=https://cn.vuejs.org/api/application.html%23app-config-idprefix"><code>app.config.idPrefix</code></a>，如果没有配置，那么就是字符串<code>v</code>。</p></li><li><p>第二部分字符串：<code>-</code>。</p></li><li><p>第三部分的值为一个自增的数字，存在vue实例上面的<code>ids</code>属性，所有的vue实例上面的<code>ids</code>属性都是指向同一个数组。这也就是为什么说<code>useId</code>可以在<code>Vue应用内</code>生成唯一的ID，而不是在<code>Vue组件内</code>生成唯一的ID。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端优化首次加载速度</title>
      <link href="//post/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E9%A6%96%E6%AC%A1%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6.html"/>
      <url>//post/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E9%A6%96%E6%AC%A1%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6.html</url>
      
        <content type="html"><![CDATA[<h2 id="compression-webpack-plugin"><a href="#compression-webpack-plugin" class="headerlink" title="compression-webpack-plugin"></a>compression-webpack-plugin</h2><p>compression-webpack-plugin 是一个 Webpack 插件，用于压缩生成的静态文件，通常是使用 Gzip 或 Brotli 压缩格式。这有助于减小文件大小，从而提高网页加载速度和性能。</p><h2 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h2><p>clean-webpack-plugin 是一个 Webpack 插件，用于在每次构建前自动清理输出目录（如 dist 文件夹），以确保新构建的文件是最新的，避免遗留旧文件。</p><h2 id="terser-webpack-plugin"><a href="#terser-webpack-plugin" class="headerlink" title="terser-webpack-plugin"></a>terser-webpack-plugin</h2><p>terser-webpack-plugin 是一个 Webpack 插件，用于压缩和混淆 JavaScript 代码，通常在生产环境中使用。它基于 Terser 工具，能够有效地减少 JavaScript 文件的体积，从而提高网页加载速度。</p><h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><p>html-webpack-plugin 是一个 Webpack 插件，用于简化生成 HTML 文件的过程，通常用于将打包的 JavaScript 和 CSS 文件自动注入到 HTML 模板中。</p><h2 id="vue-preload-webpack-plugin"><a href="#vue-preload-webpack-plugin" class="headerlink" title="@vue&#x2F;preload-webpack-plugin"></a>@vue&#x2F;preload-webpack-plugin</h2><p>@vue&#x2F;preload-webpack-plugin 是一个 Webpack 插件，主要用于优化 Vue 应用的资源加载性能。它可以自动添加 <link rel="preload"> 标签到生成的 HTML 文件中，以便浏览器预加载关键资源（如 JavaScript 和 CSS 文件）。</p><p>vue.config 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> px2rem = <span class="built_in">require</span>(<span class="string">&quot;postcss-px2rem&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postcss = <span class="title function_">px2rem</span>(&#123;</span><br><span class="line">  <span class="attr">remUnit</span>: <span class="number">37.5</span>, <span class="comment">// 基准大小 baseSize，需要和rem.js中相同</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> productionGzipExtensions = <span class="regexp">/\.(js|css|json|txt|html|ico|svg)(\?.*)?$/i</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>); <span class="comment">// 用于在每次构建前清理 /dist 文件夹</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>); <span class="comment">// 用于压缩 JavaScript 代码</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BundleAnalyzerPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-bundle-analyzer&quot;</span>); <span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PreloadPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;@vue/preload-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>).<span class="property">EventEmitter</span>.<span class="property">defaultMaxListeners</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 路径前缀</span></span><br><span class="line">  <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_PUBLICPATH</span>,</span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&quot;static&quot;</span>,</span><br><span class="line">  <span class="comment">// 是否启用 eslint-loader 在保存时检查代码</span></span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否生成 source map 文件，生产环境可以关闭以提升打包速度</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="comment">// 扩展 webpack-chain 配置，进一步优化 Webpack 配置</span></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 忽略的打包文件</span></span><br><span class="line">    config.<span class="title function_">externals</span>(&#123;</span><br><span class="line">      <span class="attr">vue</span>: <span class="string">&quot;Vue&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vue-router&quot;</span>: <span class="string">&quot;VueRouter&quot;</span>,</span><br><span class="line">      <span class="attr">vuex</span>: <span class="string">&quot;Vuex&quot;</span>,</span><br><span class="line">      <span class="attr">axios</span>: <span class="string">&quot;axios&quot;</span>,</span><br><span class="line">      <span class="string">&quot;element-ui&quot;</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置入口文件</span></span><br><span class="line">    <span class="keyword">const</span> entry = config.<span class="title function_">entry</span>(<span class="string">&quot;app&quot;</span>);</span><br><span class="line">    entry.<span class="title function_">add</span>(<span class="string">&quot;babel-polyfill&quot;</span>).<span class="title function_">end</span>();</span><br><span class="line">    entry.<span class="title function_">add</span>(<span class="string">&quot;classlist-polyfill&quot;</span>).<span class="title function_">end</span>();</span><br><span class="line">    entry.<span class="title function_">add</span>(<span class="string">&quot;@/mock&quot;</span>).<span class="title function_">end</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 配置预加载和预取，优化加载性能</span></span><br><span class="line">    <span class="comment">// config.plugin(&quot;preload&quot;).tap((options) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   options[0].fileBlacklist.push(/\.map$/, /hot-update\.js$/);</span></span><br><span class="line">    <span class="comment">//   return options;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除 prefetch 插件，避免加载不必要的资源</span></span><br><span class="line">    <span class="comment">// config.plugins.delete(&quot;prefetch&quot;);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置 Webpack</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> plugins = [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&quot;public/index.html&quot;</span>,</span><br><span class="line">        <span class="attr">inject</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">templateParameters</span>: &#123;</span><br><span class="line">          <span class="attr">BASE_URL</span>: <span class="string">&quot;/&quot;</span>, <span class="comment">// 传递 BASE_URL 到模板</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">PreloadPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">rel</span>: <span class="string">&quot;preload&quot;</span>,</span><br><span class="line">        <span class="attr">include</span>: <span class="string">&quot;initial&quot;</span>,</span><br><span class="line">        <span class="attr">fileBlacklist</span>: [<span class="regexp">/\.map$/</span>, <span class="regexp">/hot-update\.js$/</span>, <span class="regexp">/vendor\..*\.js$/</span>],</span><br><span class="line">        <span class="comment">// 根据需要进行更多配置</span></span><br><span class="line">      &#125;),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span> ||</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;test&quot;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      plugins.<span class="title function_">push</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;[path][base].gz&quot;</span>,</span><br><span class="line">          <span class="attr">algorithm</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">          <span class="attr">test</span>: productionGzipExtensions,</span><br><span class="line">          <span class="attr">threshold</span>: <span class="number">10240</span>,</span><br><span class="line">          <span class="attr">minRatio</span>: <span class="number">0.8</span>,</span><br><span class="line">          <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// exclude: /(cdn|util)\/.*\.(js|css|json|txt|html|ico|svg)$/i,</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BundleAnalyzerPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">analyzerMode</span>: <span class="string">&quot;static&quot;</span>,</span><br><span class="line">          <span class="attr">reportFilename</span>: <span class="string">&quot;bundle-report.html&quot;</span>,</span><br><span class="line">          <span class="attr">openAnalyzer</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      config.<span class="property">optimization</span> = &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">              <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="attr">drop_console</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">drop_debugger</span>: <span class="literal">true</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">output</span>: &#123;</span><br><span class="line">                <span class="attr">comments</span>: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parallel</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">          <span class="comment">// Uncomment this block if needed</span></span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">          <span class="attr">maxInitialRequests</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">minSize</span>: <span class="number">30000</span>,</span><br><span class="line">          <span class="attr">maxSize</span>: <span class="number">250000</span>,</span><br><span class="line">          <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">            <span class="attr">vendor</span>: &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">              <span class="title function_">name</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> packageName = <span class="variable language_">module</span>.<span class="property">context</span>.<span class="title function_">match</span>(</span><br><span class="line">                  <span class="regexp">/[\\/]node_modules[\\/](.*?)([\\/]|$)/</span></span><br><span class="line">                )[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> <span class="string">`npm.<span class="subst">$&#123;packageName.replace(<span class="string">&quot;@&quot;</span>, <span class="string">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">common</span>: &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;common&quot;</span>,</span><br><span class="line">              <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">              <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span>) &#123;</span><br><span class="line">      config.<span class="property">devtool</span> = <span class="string">&quot;source-map&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.<span class="property">plugins</span>.<span class="title function_">push</span>(...plugins);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">extract</span>: &#123; <span class="attr">ignoreOrder</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">postcss</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [postcss],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transpileDependencies</span>: [<span class="string">&quot;ol&quot;</span>],</span><br><span class="line">  <span class="comment">// 开发模式反向代理配置，生产模式请使用Nginx部署并配置反向代理</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">1888</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 本地服务接口地址</span></span><br><span class="line">        <span class="attr">target</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API_COMMON_URL</span>,</span><br><span class="line">        <span class="comment">// 远程演示服务地址, 可用于直接启动项目</span></span><br><span class="line">        <span class="comment">// target: &#x27;https://saber.bladex.vip/api&#x27;,</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 通过环境变量控制是否启用性能提示</span></span><br><span class="line">  <span class="comment">//  performance: &#123;</span></span><br><span class="line">  <span class="comment">//   hints: (process.env.NODE_ENV === &#x27;production&#x27; || process.env.NODE_ENV === &#x27;test&#x27;) ? &#x27;warning&#x27; : false</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="修改测试环境配置"><a href="#修改测试环境配置" class="headerlink" title="修改测试环境配置"></a>修改测试环境配置</h2><p>NODE_ENV 是一个环境变量，用于指示 Node.js 应用程序的运行环境。它通常有三个主要值： development 、 production 和 test 。</p><p>只有 production 生成环境才会压缩文件 如果是 NODE_ENV&#x3D;test 改成 NODE_ENV&#x3D;production</p><p><img src="https://atlas.pingcode.com/files/public/66ecd3315e0f3412bbbd3efe?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzI2ODExNDYwLCJleHAiOjE3MjY4MjIyNjB9.skXyVJPe6TNvhJBiCDJx885ruVH84rnhluZ00YvkFm8" alt="image.png"></p><h2 id="修改动态路由懒加载方式"><a href="#修改动态路由懒加载方式" class="headerlink" title="修改动态路由懒加载方式"></a>修改动态路由懒加载方式</h2><ol><li><strong>加载时机</strong>：<ul><li><code>require</code>：同步加载，运行时决定。</li><li><code>import</code>：异步加载，编译时确定。</li></ul></li><li><strong>作用域</strong>：<ul><li><code>require</code>：在模块内部，作用域较封闭。</li><li><code>import</code>：支持命名导入和默认导入，灵活性更高。</li></ul></li><li><strong>环境</strong>：<ul><li><code>require</code>：主要用于 Node.js。</li><li><code>import</code>：适用于现代浏览器和支持 ES6 的环境。</li></ul></li></ol><p><img src="https://atlas.pingcode.com/files/public/66ecd4cea95c5fca81a44c17?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWRfZm9yX3B1YmljX2ltYWdlIjoiNDAyMTgwNDVhZjkzNDg3NTgyMDI5ZjNlZDI2ZjQ3ZmEiLCJ0ZWFtX2Zvcl9wdWJsaWNfaW1hZ2UiOiI2MTZkMmU2MzJhNjgwNWE3NWY4MjAxOTEiLCJpc19pbnRlcm5hbF90b2tlbiI6dHJ1ZSwiaWF0IjoxNzI2ODExNDYwLCJleHAiOjE3MjY4MjIyNjB9.skXyVJPe6TNvhJBiCDJx885ruVH84rnhluZ00YvkFm8" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端大屏自适应方案</title>
      <link href="//post/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88.html"/>
      <url>//post/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88.html</url>
      
        <content type="html"><![CDATA[<h2 id="易用-🚀"><a href="#易用-🚀" class="headerlink" title="易用 🚀"></a>易用 🚀</h2><p>调用仅需一行代码，即可适配设置分辨率以下的所有屏幕，无需任何其他辅助</p><h2 id="性能-⚡"><a href="#性能-⚡" class="headerlink" title="性能 ⚡"></a>性能 ⚡</h2><p>只影响一个元素样式，计算量极小</p><h2 id="灵活-💥"><a href="#灵活-💥" class="headerlink" title="灵活 💥"></a>灵活 💥</h2><p>可以给项目全局自适应，也可以单独页面做自适应</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>即在 scale 等比缩放的基础上，获取屏幕的宽度除以设计稿的宽度，获取到宽度比例值；获取屏幕的高度除以设计稿的高度，获取到高度比例值；使用 transform: scale(x, x) 动态监听来实现页面的缩放比例，从而还原 UI 图效果。这可以支持设计稿以下的各种分辨率。</p><h2 id="使用代码"><a href="#使用代码" class="headerlink" title="使用代码"></a>使用代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">* 根据视口尺寸调整给定元素的缩放比例。</span><br><span class="line"> * @param &#123;<span class="title class_">HTMLElement</span>&#125; e - 要调整的元素。</span><br><span class="line"> * @param &#123;number&#125; planWidth - 元素的计划宽度,默认1980px。</span><br><span class="line"> * @param &#123;number&#125; planHeight - 元素的计划高度,默认1080px。</span><br><span class="line"> */</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">selfAdaption</span>(<span class="params">e, planWidth = <span class="number">1980</span>, planHeight = <span class="number">1080</span></span>) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 获取客户端视口的当前尺寸，并根据最小计划尺寸进行调整。</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@returns</span> &#123;<span class="type">&#123;width: number, height: number</span>&#125;&#125; 客户端视口的调整后宽度和高度。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(planWidth, planHeight);</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">getClientDimensions</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 获取客户端视口的当前宽度和高度</span></span><br><span class="line">        <span class="keyword">let</span> width = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">        <span class="keyword">let</span> height = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">        <span class="comment">// 如果计划高度小于1080，则进行高度调整</span></span><br><span class="line">        <span class="keyword">if</span> (planHeight &lt; <span class="number">1080</span>) &#123;</span><br><span class="line">          height -= (<span class="number">1080</span> - planHeight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果计划宽度小于1920，则进行宽度调整</span></span><br><span class="line">        <span class="keyword">if</span> (planWidth &lt; <span class="number">1920</span>) &#123;</span><br><span class="line">          width -= (<span class="number">1920</span> - planWidth);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; width, height &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 根据当前视口尺寸更新元素的缩放比例。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">updateScale</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 获取调整后的客户端尺寸</span></span><br><span class="line">        <span class="keyword">const</span> &#123; width, height &#125; = <span class="title function_">getClientDimensions</span>();</span><br><span class="line">        <span class="comment">// 计算宽度和高度的缩放比例</span></span><br><span class="line">        <span class="keyword">const</span> ratioWidth = width / planWidth;</span><br><span class="line">        <span class="keyword">const</span> ratioHeight = height / planHeight;</span><br><span class="line">        <span class="comment">// 对元素应用缩放变换</span></span><br><span class="line">        e.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`scale(<span class="subst">$&#123;ratioWidth&#125;</span>, <span class="subst">$&#123;ratioHeight&#125;</span>)`</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 设置元素的初始样式</span></span><br><span class="line">      e.<span class="property">style</span>.<span class="property">cssText</span> += <span class="string">`</span></span><br><span class="line"><span class="string">    transform-origin: 0 0 0;</span></span><br><span class="line"><span class="string">    display: flex;</span></span><br><span class="line"><span class="string">    min-width: auto;</span></span><br><span class="line"><span class="string">    min-height: auto;</span></span><br><span class="line"><span class="string">    overflow: hidden;</span></span><br><span class="line"><span class="string">    width: <span class="subst">$&#123;planWidth&#125;</span>px;</span></span><br><span class="line"><span class="string">    height: <span class="subst">$&#123;planHeight&#125;</span>px;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">      <span class="comment">// 初始更新缩放比例</span></span><br><span class="line">      <span class="title function_">updateScale</span>();</span><br><span class="line">      <span class="comment">// 添加事件监听器，在窗口调整大小时更新缩放比例</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, updateScale);</span><br><span class="line">    &#125;</span><br><span class="line">selfAdaption（e）传递的要自适应最外层dom</span><br></pre></td></tr></table></figure><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>使用 transform: scale 自适应后，地图上点击事件失效，解决办法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">resetMapSize</span>(<span class="params"></span>) &#123; </span><br><span class="line">       <span class="keyword">let</span> mapContent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;map&quot;</span>); </span><br><span class="line">       mapContent.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`scale(<span class="subst">$&#123;<span class="number">1</span> / ratioWidth&#125;</span>,<span class="subst">$&#123;<span class="number">1</span> / ratioHeight&#125;</span>)`</span> </span><br><span class="line">     &#125; </span><br><span class="line"> <span class="comment">// 用完后记得销毁监听事件 比如 vue 中 </span></span><br><span class="line"> destroyed () &#123; </span><br><span class="line">     <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="variable language_">this</span>.<span class="property">resetMapSize</span>) </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.5 源码解析， useTemplateRef 实现原理</title>
      <link href="//post/Vue3.5%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%8C%20useTemplateRef%20%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"/>
      <url>//post/Vue3.5%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%8C%20useTemplateRef%20%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="useTemplateRef-的作用"><a href="#useTemplateRef-的作用" class="headerlink" title="useTemplateRef 的作用"></a>useTemplateRef 的作用</h2><p>useTemplateRef 是用来专门获取 dom 或者 组件示例 的。</p><p>在之前，如果我们想要获取 dom ，那么需要这么做：</p><ol><li><p>先为 dom 指定 ref 属性，并且给定一个 value 值</p></li><li><p>在 js 中，声明 value 值的变量，并且给定初始值为 空的 ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 首先，您定义了一个值为undefined或空的ref</span></span><br><span class="line"><span class="comment">// 并以您想要的方式命名生成的可用内容</span></span><br><span class="line"><span class="keyword">const</span> divEl = <span class="title function_">ref</span>();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 然后使用与“ref”属性的值相同的名称,在模板中的某个地方 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;divEl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是，这种方案存在一个问题，那就是：ref 通常用来声明响应式数据。当 ref 不光作为响应式声明，还被作为 dom 实例的时候，那么就难免有点让人疑惑了。</p><p>所以在（3.5 之后） Vue 推出了一个新的 API 叫做 useTemplateRef 来解决这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;el&quot;</span>&gt;</span>程序员Sunday<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; onMounted, useTemplateRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> elRef = <span class="title function_">useTemplateRef</span>(<span class="string">&#x27;el&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="variable language_">console</span>.<span class="title function_">log</span>(elRef.<span class="property">value</span>) <span class="comment">// dom 示例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="useTemplateRef-的实现原理"><a href="#useTemplateRef-的实现原理" class="headerlink" title="useTemplateRef 的实现原理"></a>useTemplateRef 的实现原理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useTemplateRef</span>(<span class="params">key: Keys</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> i = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line">  <span class="keyword">const</span> r = <span class="title function_">shallowRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (i) &#123;</span><br><span class="line">    <span class="keyword">const</span> refs = i.<span class="property">refs</span> === <span class="variable constant_">EMPTY_OBJ</span> ? (i.<span class="property">refs</span> = &#123;&#125;) : i.<span class="property">refs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(refs, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">get</span>: <span class="function">() =&gt;</span> r.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> (r.<span class="property">value</span> = val),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第一个-i：通过-getCurrentInstance-获取，得到的是-上下文实例。"><a href="#第一个-i：通过-getCurrentInstance-获取，得到的是-上下文实例。" class="headerlink" title="第一个 i：通过 getCurrentInstance() 获取，得到的是 上下文实例。"></a>第一个 i：通过 getCurrentInstance() 获取，得到的是 上下文实例。</h5><p>​ 接下来，通过 i.refs 获取到所有的 ref 数据，然后为 refs 添加 Object.defineProperty 的监听，监听的属性名就是入参 key。如果以 useTemplateRef(‘el’) 为例，那么就是 “el”。</p><p>通过监听对应 key 的 get 和 set 标记，这里 重点关注 set 标记，在这里为 r.value 进行了赋值，即：r.value &#x3D; val。这里的 val 就是 refs[key] 的值，也就是对应的 ref 组件实例。</p><h5 id="第二个-r：通过-shallowRef-null-获取，作为返回值"><a href="#第二个-r：通过-shallowRef-null-获取，作为返回值" class="headerlink" title="第二个 r：通过 shallowRef(null) 获取，作为返回值"></a>第二个 r：通过 shallowRef(null) 获取，作为返回值</h5><p>r 作为 useTemplateRef 的返回值即 最终获取的组件示例。</p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ref和reactive原理</title>
      <link href="//post/ref%E5%92%8Creactive%E5%8E%9F%E7%90%86.html"/>
      <url>//post/ref%E5%92%8Creactive%E5%8E%9F%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>ref 的处理上就是先将基本类型转换成对象类型，然后在里面加入一个 this._v_isRef 的布尔类型的值，来判断它是不是被 ref 处理了，然后将上面写的 track 和 trigger 函数写入 get 和 set 函数里面，如果你要处理的是一个对象，那么 vue3 就会把它改成 reactive 的处理方式。所以说，ref 可以处理基本类型和引用类型，而 reactive 处理的是引用类型，二者的区别不是很大。</p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li><p>首先我们取一个对象{a: 1}</p></li><li><p>然后调用封装好的 reactive 函数 const state &#x3D; reactive({a: 1})</p></li><li><p>这个时候就会进入代码片段 1.1 里面的 reactive 函数，在进入 createReactiveObject 函数</p></li><li><p>然后就会对我们要代理的对象进行判断，如果是对象的话就继续下去</p></li><li><p>在判断我们是不是已经代理过这个对象（就是我们预先空出一个位置，将已经代理过的对象全部存储下来），代理过就返回代理后的值，没有的话就创建一个新的代理</p></li><li><p>再然后绑定上 proxy 函数里面的 get 和 set 回调函数（可以看到代码 1.2）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 Api</title>
      <link href="//post/vue3%20Api.html"/>
      <url>//post/vue3%20Api.html</url>
      
        <content type="html"><![CDATA[<p><strong>defineProps()和 defineEmits()</strong></p><p>v-model:childValueModel 修改了值 本来应该是 modeValue</p><p>defineEmites() 使用要添加 update:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;defineModelChild v-model;childValueModel=<span class="string">&quot;childValue&quot;</span>&gt;&lt;/defineModelChild&gt;</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; childValueModel &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myEmits(&#x27;update:childValueModel&#x27;, childValueModel + 1)&quot;</span>&gt;</span>数据 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> myProps = <span class="title function_">defineProps</span>([<span class="string">&#x27;childValueModel&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> myEmits= <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:childValueModel&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/defineProps-----defineEmits .vue&#x27;</span></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">a</span>=<span class="string">&quot;qwdqwd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">count</span>=<span class="string">&#x27;count&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;count&quot;</span>])</span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>((&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="title class_">String</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count.<span class="property">value</span>++</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&quot;count&quot;</span>, count.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125; &#123;&#123;props.a&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>defineModel() 3.4+版本</strong></p><p>defineModel 其实也是一个语法糖，是对 v-model 再包装的语法糖</p><p>defineModel 帮你获取到了 prop 中的 modelValue ，且当 值发生变化时，会自动帮你调用 update:modelValue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myProps = <span class="title function_">defineProps</span>([<span class="string">&quot;modelValue&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> myEmits = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:modelValue&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 说白了，这里的 modelValue 等价于 props.modelValue + emit(&#x27;update:modelValue&#x27;)</span></span><br><span class="line"><span class="comment">// defineModel 帮你 封装了 modelValue 和 update:modelValue</span></span><br><span class="line"><span class="keyword">const</span> modelValue = <span class="title function_">defineModel</span>();</span><br></pre></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">defineModelChild</span> <span class="attr">v-model</span>=<span class="string">&quot;childValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">defineModelChild</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> defineModelChild <span class="keyword">from</span> <span class="string">&#x27;./components/defineModelChild.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> childValue = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>v-model 子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; modelValue &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myEmits(&#x27;update:modelValue&#x27;, modelValue + 1)&quot;</span>&gt;</span>数据 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">defineProps</span>([<span class="string">&#x27;modelValue&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> myEmits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>defineModel() 子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; modelValue &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modelValue++&quot;</span>&gt;</span>数据 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> modelValue = <span class="title function_">defineModel</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>defineExpose 子传父</strong></p><p>（用在子组件，暴露想传递的值或方法，父组件通过 ref 属性获取子组件暴露的）</p><p>使用 script setup 的组件是默认关闭的——即通过模板引用或者 $parent 链获取到的组件的公开实例，不会暴露任何在 script setup 中声明的绑定。</p><p>那么，通过 defineExpose 编译器宏来显式指定在</p><p>然后，父组件通过 ref 属性访问子组件</p><p><strong>父组件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Index</span> ref=<span class="string">&quot;childeRef&quot;</span>&gt;&lt;/<span class="title class_">Index</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> <span class="title class_">Index</span> <span class="keyword">from</span> <span class="string">&quot;./index.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> childeRef = <span class="title function_">ref</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(childeRef.<span class="property">value</span>.<span class="property">msg</span>) <span class="comment">// Hello World</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> <span class="attr">flag</span>:boolean = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> <span class="attr">value</span>:number= <span class="number">5</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      childeRef.<span class="property">value</span>.<span class="title function_">childFn</span>(flag,value) <span class="comment">// 调用子组件函数, 输出 6</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>子组件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">childFn</span>(<span class="params">type：boolean, data：number</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是子组件&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(data)&#123;</span><br><span class="line">           <span class="keyword">let</span> value = data + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">defineExpose</span>(&#123; <span class="comment">//暴露想要传递的值或方法</span></span><br><span class="line">        msg,</span><br><span class="line">        childFn,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>defineOptions 3.3+</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title function_">defineOptions</span>(&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line"><span class="comment">//组件重命名</span></span><br><span class="line"> <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">//...更多自定义属性</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>computed 计算属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">books</span>: [</span><br><span class="line">    <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27; Yes&#x27;</span> : <span class="string">&quot;No&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; publishedBooksMessage &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>computed 传参</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">  <span class="attr">books</span>: [</span><br><span class="line">    <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">    <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27; Yes&#x27;</span> : <span class="string">&quot;No&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; publishedBooksMessage(12) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>watch 监听</strong></p><p><strong>默认开启深度监听</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">btnClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  count.<span class="property">value</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ✅ 方法一，传递响应对象</span></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ❌ 方法二：传递响应对象下的属性</span></span><br><span class="line"><span class="title function_">watch</span>(user.<span class="property">name</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 监听失败，没输出</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ✅ 方法三：传递函数，函数返回响应对象属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> user.<span class="property">name</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 监听成功，输出 jake</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; count &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>watchEffect 的使用</strong></p><p>watchEffect 也是一个帧听器，是一个副作用函数。 它会监听引用数据类型的所有属性，不需要具体到某个属性，一旦运行就会立即监听，组件卸载的时候会停止监听。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, ref, watch, watchEffect &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;112&#x27;</span>, <span class="attr">data</span>: [<span class="string">&quot;你好&quot;</span>] &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">btnClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  count.<span class="property">data</span>[<span class="number">0</span>] = <span class="string">&#x27;被改了&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">data</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"> <span class="title function_">watch</span>([count,obj],<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听的多个数据改变了&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;count.data[0]&#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>stopWatchEffect 停止监听</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span>, obj.<span class="property">name</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stopWatchEffect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;停止监听&quot;</span>);</span><br><span class="line">  <span class="title function_">stop</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>onInvalidate 函数 解决执行顺序乱的问题</p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
