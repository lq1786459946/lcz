{"title":"Three.js(一)","uid":"80efad7c695cc6b27c2c7b13bb948265","slug":"Three.js(一)","date":"2025-06-06T07:50:20.000Z","updated":"2025-06-06T07:09:02.892Z","comments":true,"path":"api/articles/Three.js(一).json","keywords":null,"cover":[],"content":"<h2 id=\"Three-js-三大要素\"><a href=\"#Three-js-三大要素\" class=\"headerlink\" title=\"Three.js 三大要素\"></a><strong>Three.js 三大要素</strong></h2><p><strong>场景（scene）、相机（camera）、渲染器（renderer）</strong></p>\n<p>相机获取到场景内显示的内容，然后再通过渲染器渲染到画布上面</p>\n<h4 id=\"1、场景（scene）\"><a href=\"#1、场景（scene）\" class=\"headerlink\" title=\"1、场景（scene）\"></a>1、场景（scene）</h4><p>场景是一个三维空间，是存放所有物品的容器，可以把场景想象成一个空房间，房间里面可以放置要呈现的物体、相机、光源等。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b1a6497425e49758e8f11d3b1e8a067~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"场景示意图\"></p>\n<p><strong>场景</strong>允许在什么地方、摆放什么东西来交给 three.js 来进行渲染，场景也就是放置物体、灯光和相机的地方。</p>\n<p>创建场景：要构件一个场景很简单，只需要 new 一个场景对象出来即可：<code>var scene = new THREE.Scene()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>(); <span class=\"comment\">// 创建场景</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、相机（camera）\"><a href=\"#2、相机（camera）\" class=\"headerlink\" title=\"2、相机（camera）\"></a>2、相机（camera）</h4><p>在场景中需要添加一个相机，相机用来确定观察位置、方向、角度，相机看到的内容，就是我们最终在屏幕上看到的内容。在程序运行过程中，可以调整相机的位置、方向、角度。</p>\n<p>想象一下，在房间里放了一个摄像机，你不在房间里面，但可以远程控制相机移动，摄像机传给远程电脑上展示出来的画面，就是 Threejs 在屏幕上呈现的画面。</p>\n<p>在 Three.js 中有两种常用的相机：<strong>透视投影相机（perspectiveCamera）和正交投影相机（OrthographicCamera ）</strong></p>\n<p><strong>透视投影相机（perspectiveCamera）【重要】</strong></p>\n<p><strong>特点</strong>透视相机的效果是模拟人眼看到的效果，跟人眼看到的世界是一样的，近大远小。</p>\n<p><strong>用途</strong>大部分场景都适合使用透视投影相机，因为跟真实世界的观测效果一样；</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac125bf4c6924c099151b7fa3a955be7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"image-20191220183433420\"></p>\n<p>创建透视投影相机：<code>var camera = new THREE.PerspectiveCamera(fov, aspect, near, far);</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fov</td>\n<td>视野：表示摄像机能看到的视野。推荐默认值 50</td>\n</tr>\n<tr>\n<td>aspect</td>\n<td>指定渲染结果水平方向和竖直方向长度的比值，推荐默认值为窗口的宽高比，即 window.innerWidth&#x2F;window.innerHeight，如果比例设置的不对，会发现渲染出来的画面有拉伸或者压缩的感觉。</td>\n</tr>\n<tr>\n<td>near</td>\n<td>近端渲染距离：指定从距离摄像机多近的位置开始渲染，推荐默认值 0.1</td>\n</tr>\n<tr>\n<td>far</td>\n<td>远端距离：指定摄像机从它所在的位置最远能看到多远，太小场景中的远处不会被渲染，太大会浪费资源影响性能，推荐默认值 1000。</td>\n</tr>\n</tbody></table>\n<p>近端渲染距离和远端距离：这两个是设置相机可以看到的场景内容的范围，只有离相机的距离大于 near 值，小于 far 值，且在相机的可视角度之内，才能被相机投影到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(</span><br><span class=\"line\">  <span class=\"number\">75</span>,</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>,</span><br><span class=\"line\">  <span class=\"number\">0.1</span>,</span><br><span class=\"line\">  <span class=\"number\">1000</span></span><br><span class=\"line\">);<span class=\"comment\">// 创建透视投影相机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置相机位置</span></span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">y</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">z</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 以上设置相机位置可以简写为：</span></span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"title function_\">set</span>(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>正交投影相机（OrthographicCamera ）</strong></p>\n<p><strong>特点</strong>正交投影则远近都是一样的大小，三维空间中平行的线，投影到二维空间也一定是平行的。</p>\n<p><strong>用途</strong>一般是用在制图、建模等方面，方便观察模型之间的大小比例。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d4debac47d24cbe8c85f24376013a0b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"image-20191220183241633\"></p>\n<p>创建正交投影相机：<code>var camera = new THREE.OrthographicCamera( left,right, top,bottom, near, far )</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>可被渲染空间的左端面</td>\n</tr>\n<tr>\n<td>right</td>\n<td>可被渲染空间的右端面</td>\n</tr>\n<tr>\n<td>top</td>\n<td>可被渲染空间的上端面</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>可被渲染空间的下端面</td>\n</tr>\n<tr>\n<td>near</td>\n<td>基于相机所在位置，可被渲染空间的近端面</td>\n</tr>\n<tr>\n<td>far</td>\n<td>基于相机所在位置，可被渲染空间的远端面</td>\n</tr>\n</tbody></table>\n<p>以上 6 个参数规定了相机视景体的左、右、上、下、前、后六个面的位置，这六个投影面围成的区域就是相机投影的可见区域。在三维空间内，只有在这个区域内的物体才会被相机看到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript 体验<span class=\"variable constant_\">AI</span>代码助手 代码解读复制代码<span class=\"keyword\">var</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">OrthographicCamera</span>(-<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>); <span class=\"comment\">// 创建正交投影相机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置相机位置</span></span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">y</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">z</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 以上设置相机位置可以简写为：</span></span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"title function_\">set</span>(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>正交投影和透视投影对比：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce527d5c8bae48458bd1bea375f7bae1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"image-20191222113407660\"></p>\n<p>左图是正交投影，物体反射的光平行投射到屏幕上，其大小始终不变，所以远近的物体大小一样。</p>\n<p>右图是透视投影，符合我们平时看东西的感觉，近大远小。</p>\n<h4 id=\"3、渲染器（renderer）\"><a href=\"#3、渲染器（renderer）\" class=\"headerlink\" title=\"3、渲染器（renderer）\"></a>3、渲染器（renderer）</h4><p>渲染器的作用就是将相机拍摄出的画面在浏览器中呈现出来。渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制。</p>\n<p>Three.js 中有很多种类的渲染器，例如 webGLRenderer、canvasRenderer、SVGRenderer，通常使用的是 WebGLRenderer 渲染器。</p>\n<p>创建 WebGLRenderer 渲染器：<code>var renderer = new THERR.WebGLRenderer();</code></p>\n<p>创建完渲染器后，需要调用 render 方法将之前创建好的场景和相机相结合从而渲染出来，即调用渲染器的 render 方法：<code>renderer.render(scene,camera)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>(); <span class=\"comment\">// 创建一个 WebGL 渲染器</span></span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>); <span class=\"comment\">// 通过调用 setSize() 方法设置渲染的长宽（设置渲染器为全屏）</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>); <span class=\"comment\">// 将渲染结果展示到页面上</span></span><br><span class=\"line\">renderer.<span class=\"title function_\">render</span>(scene, camera); <span class=\"comment\">// 结合场景和相机进行渲染，即用摄像机拍下此刻的场景（最后一步）</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>说明：</strong></p>\n<ul>\n<li>setSize() 方法设置渲染的长宽。</li>\n<li>renderer 的 domElement 元素，表示渲染器中的画布，所有的渲染都是画在 domElement 上，所以这里的 appendChild 表示将这个 domElement 挂接在 body 下面，这样渲染的结果就能够在页面中显示了。</li>\n<li>render()方法中传递我们的场景和相机，相当于传递了一张由相机拍摄场景得到的一张底片，它将图像渲染到我们的画布中。</li>\n</ul>\n<p><strong>以上就是 Three.js 中完成 3D 绘图的三大要素（场景、相机、渲染器），利用这三大要素，我们才能够使用相机将场景渲染到网页上去。</strong></p>\n<p><strong>总结：场景，相机，渲染器</strong></p>\n<p><strong>场景</strong>是一个三维空间，用来存放一个物体的容器，我们可以将需要的物体放入场景中，例如苹果，葡萄。同时，物体自身也管理着其在场景中的位置。</p>\n<p><strong>相机</strong>相机的作用就是面对场景，在场景中取一个合适的景，把它拍下来。</p>\n<p><strong>渲染器</strong>渲染器的作用就是将相机拍摄下来的图片，放到浏览器中去显示。</p>\n<p><strong>场景，相机，渲染器之间的关系如下图所示：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2fe2ff83a7c4836851323aa7a5f916d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"image-20191222155115646\"></p>\n","feature":true,"text":"Three.js 三大要素场景（scene）、相机（camera）、渲染器（renderer） 相机获取到场景内显示的内容，然后再通过渲染器渲染到画布上面 1、...","permalink":"/post/Three.js(一)","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Three.js","slug":"Three-js","count":1,"path":"api/categories/Three-js.json"}],"tags":[{"name":"Three.js","slug":"Three-js","count":1,"path":"api/tags/Three-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Three-js-%E4%B8%89%E5%A4%A7%E8%A6%81%E7%B4%A0\"><span class=\"toc-text\">Three.js 三大要素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%9C%BA%E6%99%AF%EF%BC%88scene%EF%BC%89\"><span class=\"toc-text\">1、场景（scene）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%9B%B8%E6%9C%BA%EF%BC%88camera%EF%BC%89\"><span class=\"toc-text\">2、相机（camera）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%B8%B2%E6%9F%93%E5%99%A8%EF%BC%88renderer%EF%BC%89\"><span class=\"toc-text\">3、渲染器（renderer）</span></a></li></ol></li></ol></li></ol>","author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Vue3中的插槽源码","uid":"a7fb576f585a285d0be31f11b996bbe0","slug":"Vue3中的插槽源码","date":"2025-03-07T06:15:50.000Z","updated":"2025-03-07T06:19:53.950Z","comments":true,"path":"api/articles/Vue3中的插槽源码.json","keywords":null,"cover":null,"text":"dome我们先来看个常见的插槽demo，其中子组件代码如下： 12345678910<template> <slot></slot> <slot name=\"h...","permalink":"/post/Vue3中的插槽源码","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/categories/Vue3.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/tags/Vue3.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}