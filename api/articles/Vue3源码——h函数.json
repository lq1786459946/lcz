{"title":"Vue3源码——h函数","uid":"c86a81eebdde1918fe7712218383ec84","slug":"Vue3源码——h函数","date":"2024-10-12T06:57:10.000Z","updated":"2024-10-12T07:04:43.244Z","comments":true,"path":"api/articles/Vue3源码——h函数.json","keywords":null,"cover":null,"content":"<p>Vue和React这类框架比起远古时期的jQuery，最大的改变就是采用了<code>MVVM架构</code>。</p>\n<p>而MVVM架构的核心，则是<code>虚拟DOM</code>。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h3><p>说到虚拟DOM，先得说起<strong>真实DOM</strong>。真实的DOM就是一颗<strong>HTML树</strong>，里面包含了<code>节点</code>、<code>属性</code>（<strong>class</strong>、<strong>id</strong>、<strong>style</strong>等）、<code>子节点</code>信息。</p>\n<p>例如这样的DOM节点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>虚拟的DOM也要包括和真实DOM一样的信息。区别在于，它用<strong>JS对象</strong>来表示</p>\n<p>例如刚才的DOM节点，用JS可以这样表示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vnode = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">class</span>: <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，这个vnode对象，用了<code>type</code>、<code>props</code>和<code>children</code>分别表示了这个真实DOM节点的<code>类型</code>（div）、<code>属性</code>（id为app，class为test）以及<code>子节点</code>（字符串hello world）。看着这样格式的JS对象，我们也可以很容易地推理得到一个真实的DOM节点。我们把这样的一个对象称之为<strong>虚拟DOM</strong>。</p>\n<h3 id=\"h函数\"><a href=\"#h函数\" class=\"headerlink\" title=\"h函数\"></a>h函数</h3><p>在Vue源码中，虚拟DOM是由<code>h函数</code>生成的。生成时同样可以传入<code>节点类型</code>、<code>属性</code>以及<code>子节点信息</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;app&quot;</span>, <span class=\"attr\">class</span>: <span class=\"string\">&quot;test&quot;</span> &#125;, <span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>尝试打印这个h函数生成的vnode，内部信息比较丰富，用注释标注了一些核心的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是否是VNode对象</span></span><br><span class=\"line\">        <span class=\"string\">&quot;__v_isVNode&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;__v_skip&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 节点类型</span></span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 节点属性</span></span><br><span class=\"line\">        <span class=\"string\">&quot;props&quot;</span>: &#123; <span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;app&quot;</span> &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;key&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;ref&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;scopeId&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;slotScopeIds&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 子节点</span></span><br><span class=\"line\">        <span class=\"string\">&quot;children&quot;</span>: <span class=\"string\">&quot;hello world&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;component&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;suspense&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;ssContent&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;ssFallback&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;dirs&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;transition&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;el&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;anchor&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;target&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;targetAnchor&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;staticCount&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;shapeFlag&quot;</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;patchFlag&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;dynamicProps&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;dynamicChildren&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;appContext&quot;</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"h函数框架\"><a href=\"#h函数框架\" class=\"headerlink\" title=\"h函数框架\"></a>h函数框架</h2><h3 id=\"基本框架\"><a href=\"#基本框架\" class=\"headerlink\" title=\"基本框架\"></a>基本框架</h3><p>对于h函数，我们知道应该包括三个参数</p>\n<ul>\n<li>节点类型type</li>\n<li>属性props（可选）</li>\n<li>子节点children（可选）</li>\n</ul>\n<p>考虑到属性和子节点都是<strong>可选参数</strong>，因此要针对入参数量和类型做一些判断，大概的规则如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">h</span>(<span class=\"params\">type: any, propsOrChildren?: any, children?: any</span>): <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 两个参数，不知道是props没传还是children没传</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isObject</span>(propsOrChildren) &amp;&amp; !<span class=\"title function_\">isArray</span>(propsOrChildren)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isVNode</span>(propsOrChildren)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">createVNode</span>(type, <span class=\"literal\">null</span>, [propsOrChildren]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">createVNode</span>(type, propsOrChildren, []);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">createVNode</span>(type, <span class=\"literal\">null</span>, propsOrChildren);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 三个及以上的参数，肯定是props和children都有</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      children = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l === <span class=\"number\">3</span> &amp;&amp; <span class=\"title function_\">isVNode</span>(children)) &#123;</span><br><span class=\"line\">      children = [children];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">createVNode</span>(type, propsOrChildren, children);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至于<strong>是否为vnode</strong>的判断，直接根据<code>__v_isVNode属性</code>就可得知</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isVNode</span>(<span class=\"params\">value: any</span>): value is <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value ? value.<span class=\"property\">__v_isVNode</span> === <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整体框架出来了，接下来vnode的生成，主要就是<code>createVNode</code>这个方法了</p>\n<h3 id=\"vnode的类型\"><a href=\"#vnode的类型\" class=\"headerlink\" title=\"vnode的类型\"></a>vnode的类型</h3><p>关于DOM节点，我们大概可以分成这样一些类别</p>\n<ul>\n<li>标准节点：div、h1等常规标签</li>\n<li>注释节点</li>\n<li>Fragment节点</li>\n<li>组件</li>\n<li>……</li>\n</ul>\n<p>那么，相对的，vnode也会区分一些节点类型。</p>\n<p>查看Vue源码可以得知，里面包含了<strong>文本节点</strong><code>Text</code>、<strong>片段节点</strong><code>Fragment</code>、<strong>DOM节点</strong><code>Element</code>、<strong>组件节点</strong><code>Component</code>、<strong>注释节点</strong><code>Comment</code>等等。</p>\n<p>此外，对于<code>children</code>来说，可能是<strong>一个</strong>，也可能是<strong>数组</strong>，甚至是<strong>对象</strong>、<strong>函数</strong>等等多种不同类型。</p>\n<p>源码中，为了区分不同的节点，使用了<code>shapeFlag</code>，而且这个值还用二进制位进行计算。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> enum <span class=\"title class_\">ShapeFlags</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * type = Element</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable constant_\">ELEMENT</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 函数组件</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable constant_\">FUNCTIONAL_COMPONENT</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 有状态（响应数据）组件</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable constant_\">STATEFUL_COMPONENT</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * children = Text</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable constant_\">TEXT_CHILDREN</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * children = Array</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable constant_\">ARRAY_CHILDREN</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * children = slot</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable constant_\">SLOTS_CHILDREN</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">5</span>,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件：有状态（响应数据）组件 | 函数组件</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable constant_\">COMPONENT</span> = <span class=\"title class_\">ShapeFlags</span>.<span class=\"property\">STATEFUL_COMPONENT</span> | <span class=\"title class_\">ShapeFlags</span>.<span class=\"property\">FUNCTIONAL_COMPONENT</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"h函数实现\"><a href=\"#h函数实现\" class=\"headerlink\" title=\"h函数实现\"></a>h函数实现</h2><h3 id=\"element节点-文本children\"><a href=\"#element节点-文本children\" class=\"headerlink\" title=\"element节点+文本children\"></a>element节点+文本children</h3><p>h函数最简单的用法是创建一个有tag名称的节点，子节点是文本。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vnode = <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, <span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>为了实现<code>VNode</code>的构建，需要先构建<code>createVNode</code>方法，接收<code>type</code>、<code>props</code>、<code>children</code>这三个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">__v_isVNode</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: any</span><br><span class=\"line\">  <span class=\"attr\">props</span>: any</span><br><span class=\"line\">  <span class=\"attr\">children</span>: any</span><br><span class=\"line\">  <span class=\"attr\">shapeFlag</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createVNode</span>(<span class=\"params\">type, props, children</span>): <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里先处理文本类型，其他的shapeFlag先不处理</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> shapeFlag = <span class=\"title function_\">isString</span>(type) ? <span class=\"title class_\">ShapeFlags</span>.<span class=\"property\">ELEMENT</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">createBaseVNode</span>(type, props, children, shapeFlag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>生成了<code>shapeFlag</code>后，要先创建VNode的一些基本属性，源码中用的就是<code>createBaseVNode</code>方法，并且在这之后使用<code>normalizeChildren</code>标准化children的类型（即使用<strong>位或运算</strong>得到一个shapeFlag值）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建基础vnode</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createBaseVNode</span>(<span class=\"params\">type, props, children, shapeFlag</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vnode = &#123;</span><br><span class=\"line\">    <span class=\"attr\">__v_isVNode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    props,</span><br><span class=\"line\">    shapeFlag,</span><br><span class=\"line\">  &#125; <span class=\"keyword\">as</span> <span class=\"title class_\">VNode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">normalizeChildren</span>(vnode, children);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">normalizeChildren</span>(<span class=\"params\">vnode: VNode, children: unknown</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> type = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (children === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    children = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isArray</span>(children)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 数组类型children处理</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> children === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 对象类型的children处理</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunction</span>(children)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 函数类型的children处理</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    children = <span class=\"title class_\">String</span>(children);</span><br><span class=\"line\">    type = <span class=\"title class_\">ShapeFlags</span>.<span class=\"property\">TEXT_CHILDREN</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  vnode.<span class=\"property\">children</span> = children;</span><br><span class=\"line\">  vnode.<span class=\"property\">shapeFlag</span> |= type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时我们可以通过<code>h函数</code>拿到<code>tag</code>为<code>string</code>（例如<code>div</code>、<code>p</code>等），且<code>children</code>内容是<code>text</code>的vnode值了，和源码的核心内容是一致的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vnode = <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(vnode); <span class=\"comment\">// shapeFlag是9，children是hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"element节点-数组children\"><a href=\"#element节点-数组children\" class=\"headerlink\" title=\"element节点+数组children\"></a>element节点+数组children</h3><p>相比于上一个节点类型，这个的区别就是children不再是一个节点，而是<strong>多个</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vnode = <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, [<span class=\"title function_\">h</span>(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;p1&quot;</span>), <span class=\"title function_\">h</span>(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>), <span class=\"title function_\">h</span>(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>)]);</span><br></pre></td></tr></table></figure>\n\n<p>其中每一个节点的解析就是刚才<code>element+text</code>这种组合，而且这几个节点会先被处理成<code>VNode</code>，唯一的区别是整体<code>div</code>这个节点</p>\n<p>查看源码可以知道，我们只需要在最后生成<code>div</code>的<code>VNode</code>的时候提供一个<code>type</code>数值就行</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">normalizeChildren</span>(<span class=\"params\">vnode: VNode, children: <span class=\"built_in\">unknown</span></span>) &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isArray</span>(children)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> = <span class=\"title class_\">ShapeFlags</span>.<span class=\"property\">ARRAY_CHILDREN</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候这个<code>VNode</code>的打印结果就和源码核心一致了</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vnode = <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, [<span class=\"title function_\">h</span>(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;p1&quot;</span>), <span class=\"title function_\">h</span>(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>), <span class=\"title function_\">h</span>(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>)]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(vnode); <span class=\"comment\">// shapeFlag是17，children也是vnode节点，shapeFlag都是9</span></span><br></pre></td></tr></table></figure>\n\n<p>从这里不难发现，VNode中一个很关键的属性是<code>shapeFlag</code>，正如名字一样，它描述了<strong>虚拟DOM节点的形状</strong>，而这个形状包括了<strong>父节点类型</strong>和<strong>子节点类型&#x2F;形状</strong>，其中：</p>\n<ul>\n<li>createBaseVNode：提供了父节点的类型</li>\n<li>normalizeChildren：提供了子节点的类型和形状</li>\n</ul>\n<h3 id=\"组件Component\"><a href=\"#组件Component\" class=\"headerlink\" title=\"组件Component\"></a>组件Component</h3><p>首先要明确一个问题：在Vue中，组件的本质是<strong>对象&#x2F;函数</strong></p>\n<p>所以实际上在Vue中写的组件，如果需要渲染的话，要用<strong>对象</strong>包裹，其中包含一个<code>render</code>方法</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vnode1 = <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, <span class=\"string\">&quot;this is component&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode1;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vnode2 = <span class=\"title function_\">h</span>(component);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">render</span>(vnode2, <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>按照之前的h函数实现和理解，其实我们可以在component的<code>render</code>中直接返回一个<code>VNode对象</code>，<code>render方法</code>直接给一个VNode对象，也能达到一样的效果，主要的注意点就是<code>shapeFlag值</code>要保持和源码一致</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">v__is_vnode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: <span class=\"string\">&quot;this is component&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">shapeFlag</span>: <span class=\"number\">9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">render</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">v__is_vnode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: component,</span><br><span class=\"line\">  <span class=\"attr\">shapeFlag</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;, <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>所以只需要注意处理一下<code>type</code>和<code>shapeFlag</code>值，就可以完成组件component的h函数了，只要在<code>createVNode</code>中修改一行即可</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVNode</span>(<span class=\"params\"><span class=\"keyword\">type</span>, props, children</span>): <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  <span class=\"keyword\">const</span> shapeFlag = <span class=\"title function_\">isString</span>(<span class=\"keyword\">type</span>)</span><br><span class=\"line\">    ? <span class=\"title class_\">ShapeFlags</span>.<span class=\"property\">ELEMENT</span></span><br><span class=\"line\">    : <span class=\"title function_\">isObject</span>(<span class=\"keyword\">type</span>)</span><br><span class=\"line\">    ? <span class=\"title class_\">ShapeFlags</span>.<span class=\"property\">STATEFUL_COMPONENT</span></span><br><span class=\"line\">    : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照之前的代码，最后生成的VNode里的children会变成”undefined”，其实是<code>normalizeChildren</code>里面的判断条件过于严苛了，把<code>===</code>改成<code>==</code>即可</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">normalizeChildren</span>(<span class=\"params\">vnode: VNode, children: <span class=\"built_in\">unknown</span></span>) &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (children == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    children = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他一些简单节点\"><a href=\"#其他一些简单节点\" class=\"headerlink\" title=\"其他一些简单节点\"></a>其他一些简单节点</h3><p>这里的简单节点包括：</p>\n<ul>\n<li>纯文本<code>Text</code></li>\n<li>注释<code>Comment</code></li>\n<li>片段<code>Fragment</code></li>\n</ul>\n<p>查看源码可以发现，用h函数构建的这些节点的<code>type</code>都是<code>Symbol类型</code>，<code>shapeFlag</code>都是8</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vnodeText = <span class=\"title function_\">h</span>(<span class=\"title class_\">Text</span>, <span class=\"string\">&quot;this is text&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vnodeComment = <span class=\"title function_\">h</span>(<span class=\"title class_\">Comment</span>, <span class=\"string\">&quot;this is comment&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vnodeFragment = <span class=\"title function_\">h</span>(<span class=\"title class_\">Fragment</span>, <span class=\"string\">&quot;this is fragment&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>相比于之前的代码，我们只需要考虑<code>type</code>的问题，这里直接创建几个常量处理即可</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Fragment</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;Fragment&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Text</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;Text&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Comment</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;Comment&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>处理完之后，h函数对这些简单节点的输出就和源码核心保持一致了</p>\n<h2 id=\"class和style的增强处理\"><a href=\"#class和style的增强处理\" class=\"headerlink\" title=\"class和style的增强处理\"></a>class和style的增强处理</h2><p>Vue中对<code>class</code>和<code>style</code>，支持使用<strong>数组&#x2F;对象</strong>，动态绑定值</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vnode = <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;div&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">class</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;red&#x27;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;improve class&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>按照上面的代码，可以拿到一个带有class为red的div</p>\n<p>阅读源码得知，这个增强处理需要添加一个<code>normalizeClass方法</code>，方法本质上也是对class对象做一个<strong>遍历</strong>，针对<code>string</code>&#x2F;<code>array</code>&#x2F;<code>object</code>做不同的处理方式，最后拼接成<code>string</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">normalizeClass</span>(<span class=\"params\">value: <span class=\"built_in\">unknown</span></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isString</span>(value)) &#123;</span><br><span class=\"line\">    res = value;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; value.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> normalized = <span class=\"title function_\">normalizeClass</span>(value[i]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (normalized) &#123;</span><br><span class=\"line\">        res += normalized + <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isObject</span>(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> name <span class=\"keyword\">in</span> value <span class=\"keyword\">as</span> <span class=\"built_in\">object</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((value <span class=\"keyword\">as</span> <span class=\"built_in\">object</span>)[name]) &#123;</span><br><span class=\"line\">        res += name + <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVNode</span>(<span class=\"params\"><span class=\"keyword\">type</span>, props, children</span>): <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; <span class=\"attr\">class</span>: klass, style &#125; = props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (klass &amp;&amp; !<span class=\"title function_\">isString</span>(klass)) &#123;</span><br><span class=\"line\">      props.<span class=\"property\">class</span> = <span class=\"title function_\">normalizeClass</span>(klass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>style的处理逻辑上和class一致</p>\n","text":"Vue和React这类框架比起远古时期的jQuery，最大的改变就是采用了MVVM架构。 而MVVM架构的核心，则是虚拟DOM。 基本概念虚拟DOM说到虚拟DO...","permalink":"/post/Vue3源码——h函数","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/categories/Vue3.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/tags/Vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9FDOM\"><span class=\"toc-text\">虚拟DOM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#h%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">h函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#h%E5%87%BD%E6%95%B0%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">h函数框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">基本框架</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vnode%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">vnode的类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#h%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">h函数实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#element%E8%8A%82%E7%82%B9-%E6%96%87%E6%9C%ACchildren\"><span class=\"toc-text\">element节点+文本children</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#element%E8%8A%82%E7%82%B9-%E6%95%B0%E7%BB%84children\"><span class=\"toc-text\">element节点+数组children</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6Component\"><span class=\"toc-text\">组件Component</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">其他一些简单节点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#class%E5%92%8Cstyle%E7%9A%84%E5%A2%9E%E5%BC%BA%E5%A4%84%E7%90%86\"><span class=\"toc-text\">class和style的增强处理</span></a></li></ol>","author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue3源码——render函数","uid":"322d11b057e8d3400060738444344655","slug":"Vue3源码——render函数","date":"2024-10-18T07:25:50.000Z","updated":"2024-10-18T07:33:00.222Z","comments":true,"path":"api/articles/Vue3源码——render函数.json","keywords":null,"cover":null,"text":"在了解vue render函数之前, 需要先了解下Vue的整体流程 应该可以理解一个Vue组件是如何运行起来的. 模板通过编译生成AST树 AST树生成Vue的...","permalink":"/post/Vue3源码——render函数","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/categories/Vue3.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/tags/Vue3.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Vue3.5 useId","uid":"a4c1e6f4a7d260a2971f3f08fe46eea6","slug":"Vue3.5 useId","date":"2024-09-27T07:14:20.000Z","updated":"2024-09-27T07:19:33.170Z","comments":true,"path":"api/articles/Vue3.5 useId.json","keywords":null,"cover":null,"text":"useId的作用他的作用也是生成唯一ID，同一个Vue应用里面每次调用useId生成的ID都不同。 使用方法也很简单，代码如下： 123456789101112...","permalink":"/post/Vue3.5 useId","photos":[],"count_time":{"symbolsCount":757,"symbolsTime":"1 mins."},"categories":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/categories/Vue3.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":8,"path":"api/tags/Vue3.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}