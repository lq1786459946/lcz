<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端大屏自适应方案</title>
      <link href="//post/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88.html"/>
      <url>//post/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88.html</url>
      
        <content type="html"><![CDATA[<h2 id="易用🚀"><a href="#易用🚀" class="headerlink" title="易用🚀"></a>易用🚀</h2><p>调用仅需一行代码，即可适配设置分辨率以下的所有屏幕，无需任何其他辅助</p><h2 id="性能⚡"><a href="#性能⚡" class="headerlink" title="性能⚡"></a>性能⚡</h2><p>只影响一个元素样式，计算量极小</p><h2 id="灵活💥"><a href="#灵活💥" class="headerlink" title="灵活💥"></a>灵活💥</h2><p>可以给项目全局自适应，也可以单独页面做自适应</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>即在 scale 等比缩放的基础上，获取屏幕的宽度除以设计稿的宽度，获取到宽度比例值；获取屏幕的高度除以设计稿的高度，获取到高度比例值；使用 transform: scale(x, x) 动态监听来实现页面的缩放比例，从而还原 UI 图效果。这可以支持设计稿以下的各种分辨率。</p><h2 id="使用代码"><a href="#使用代码" class="headerlink" title="使用代码"></a>使用代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">* 根据视口尺寸调整给定元素的缩放比例。</span><br><span class="line"> * @param &#123;<span class="title class_">HTMLElement</span>&#125; e - 要调整的元素。</span><br><span class="line"> * @param &#123;number&#125; planWidth - 元素的计划宽度,默认1980px。</span><br><span class="line"> * @param &#123;number&#125; planHeight - 元素的计划高度,默认1080px。</span><br><span class="line"> */</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">selfAdaption</span>(<span class="params">e, planWidth = <span class="number">1980</span>, planHeight = <span class="number">1080</span></span>) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 获取客户端视口的当前尺寸，并根据最小计划尺寸进行调整。</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@returns</span> &#123;<span class="type">&#123;width: number, height: number</span>&#125;&#125; 客户端视口的调整后宽度和高度。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(planWidth, planHeight);</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">getClientDimensions</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 获取客户端视口的当前宽度和高度</span></span><br><span class="line">        <span class="keyword">let</span> width = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">        <span class="keyword">let</span> height = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">        <span class="comment">// 如果计划高度小于1080，则进行高度调整</span></span><br><span class="line">        <span class="keyword">if</span> (planHeight &lt; <span class="number">1080</span>) &#123;</span><br><span class="line">          height -= (<span class="number">1080</span> - planHeight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果计划宽度小于1920，则进行宽度调整</span></span><br><span class="line">        <span class="keyword">if</span> (planWidth &lt; <span class="number">1920</span>) &#123;</span><br><span class="line">          width -= (<span class="number">1920</span> - planWidth);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; width, height &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 根据当前视口尺寸更新元素的缩放比例。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">updateScale</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 获取调整后的客户端尺寸</span></span><br><span class="line">        <span class="keyword">const</span> &#123; width, height &#125; = <span class="title function_">getClientDimensions</span>();</span><br><span class="line">        <span class="comment">// 计算宽度和高度的缩放比例</span></span><br><span class="line">        <span class="keyword">const</span> ratioWidth = width / planWidth;</span><br><span class="line">        <span class="keyword">const</span> ratioHeight = height / planHeight;</span><br><span class="line">        <span class="comment">// 对元素应用缩放变换</span></span><br><span class="line">        e.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`scale(<span class="subst">$&#123;ratioWidth&#125;</span>, <span class="subst">$&#123;ratioHeight&#125;</span>)`</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 设置元素的初始样式</span></span><br><span class="line">      e.<span class="property">style</span>.<span class="property">cssText</span> += <span class="string">`</span></span><br><span class="line"><span class="string">    transform-origin: 0 0 0;</span></span><br><span class="line"><span class="string">    display: flex;</span></span><br><span class="line"><span class="string">    min-width: auto;</span></span><br><span class="line"><span class="string">    min-height: auto;</span></span><br><span class="line"><span class="string">    overflow: hidden;</span></span><br><span class="line"><span class="string">    width: <span class="subst">$&#123;planWidth&#125;</span>px;</span></span><br><span class="line"><span class="string">    height: <span class="subst">$&#123;planHeight&#125;</span>px;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">      <span class="comment">// 初始更新缩放比例</span></span><br><span class="line">      <span class="title function_">updateScale</span>();</span><br><span class="line">      <span class="comment">// 添加事件监听器，在窗口调整大小时更新缩放比例</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, updateScale);</span><br><span class="line">    &#125;</span><br><span class="line">selfAdaption（e）传递的要自适应最外层dom</span><br></pre></td></tr></table></figure><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>使用transform: scale自适应后，地图上点击事件失效，解决办法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">resetMapSize</span>(<span class="params"></span>) &#123; </span><br><span class="line">       <span class="keyword">let</span> mapContent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;map&quot;</span>); </span><br><span class="line">       mapContent.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`scale(<span class="subst">$&#123;<span class="number">1</span> / ratioWidth&#125;</span>,<span class="subst">$&#123;<span class="number">1</span> / ratioHeight&#125;</span>)`</span> </span><br><span class="line">     &#125; </span><br><span class="line"> <span class="comment">// 用完后记得销毁监听事件 比如 vue 中 </span></span><br><span class="line"> destroyed () &#123; </span><br><span class="line">     <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="variable language_">this</span>.<span class="property">resetMapSize</span>) </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.5 源码解析， useTemplateRef 实现原理</title>
      <link href="//post/Vue3.5%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%8C%20useTemplateRef%20%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"/>
      <url>//post/Vue3.5%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%8C%20useTemplateRef%20%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="useTemplateRef-的作用"><a href="#useTemplateRef-的作用" class="headerlink" title="useTemplateRef 的作用"></a>useTemplateRef 的作用</h2><p>useTemplateRef 是用来专门获取 dom 或者 组件示例 的。</p><p>在之前，如果我们想要获取 dom ，那么需要这么做：</p><ol><li><p>先为 dom 指定 ref 属性，并且给定一个 value 值</p></li><li><p>在 js 中，声明 value 值的变量，并且给定初始值为 空的 ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 首先，您定义了一个值为undefined或空的ref</span></span><br><span class="line"><span class="comment">// 并以您想要的方式命名生成的可用内容</span></span><br><span class="line"><span class="keyword">const</span> divEl = <span class="title function_">ref</span>();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 然后使用与“ref”属性的值相同的名称,在模板中的某个地方 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;divEl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是，这种方案存在一个问题，那就是：ref 通常用来声明响应式数据。当 ref 不光作为响应式声明，还被作为 dom 实例的时候，那么就难免有点让人疑惑了。</p><p>所以在（3.5 之后） Vue 推出了一个新的 API 叫做 useTemplateRef 来解决这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;el&quot;</span>&gt;</span>程序员Sunday<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; onMounted, useTemplateRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> elRef = <span class="title function_">useTemplateRef</span>(<span class="string">&#x27;el&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="variable language_">console</span>.<span class="title function_">log</span>(elRef.<span class="property">value</span>) <span class="comment">// dom 示例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="useTemplateRef-的实现原理"><a href="#useTemplateRef-的实现原理" class="headerlink" title="useTemplateRef 的实现原理"></a>useTemplateRef 的实现原理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useTemplateRef</span>(<span class="params">key: Keys</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> i = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line">  <span class="keyword">const</span> r = <span class="title function_">shallowRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (i) &#123;</span><br><span class="line">    <span class="keyword">const</span> refs = i.<span class="property">refs</span> === <span class="variable constant_">EMPTY_OBJ</span> ? (i.<span class="property">refs</span> = &#123;&#125;) : i.<span class="property">refs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(refs, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">get</span>: <span class="function">() =&gt;</span> r.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> (r.<span class="property">value</span> = val),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第一个-i：通过-getCurrentInstance-获取，得到的是-上下文实例。"><a href="#第一个-i：通过-getCurrentInstance-获取，得到的是-上下文实例。" class="headerlink" title="第一个 i：通过 getCurrentInstance() 获取，得到的是 上下文实例。"></a>第一个 i：通过 getCurrentInstance() 获取，得到的是 上下文实例。</h5><p>​ 接下来，通过 i.refs 获取到所有的 ref 数据，然后为 refs 添加 Object.defineProperty 的监听，监听的属性名就是入参 key。如果以 useTemplateRef(‘el’) 为例，那么就是 “el”。</p><p>通过监听对应 key 的 get 和 set 标记，这里 重点关注 set 标记，在这里为 r.value 进行了赋值，即：r.value &#x3D; val。这里的 val 就是 refs[key] 的值，也就是对应的 ref 组件实例。</p><h5 id="第二个-r：通过-shallowRef-null-获取，作为返回值"><a href="#第二个-r：通过-shallowRef-null-获取，作为返回值" class="headerlink" title="第二个 r：通过 shallowRef(null) 获取，作为返回值"></a>第二个 r：通过 shallowRef(null) 获取，作为返回值</h5><p>r 作为 useTemplateRef 的返回值即 最终获取的组件示例。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ref和reactive原理</title>
      <link href="//post/ref%E5%92%8Creactive%E5%8E%9F%E7%90%86.html"/>
      <url>//post/ref%E5%92%8Creactive%E5%8E%9F%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>ref 的处理上就是先将基本类型转换成对象类型，然后在里面加入一个 this._v_isRef 的布尔类型的值，来判断它是不是被 ref 处理了，然后将上面写的 track 和 trigger 函数写入 get 和 set 函数里面，如果你要处理的是一个对象，那么 vue3 就会把它改成 reactive 的处理方式。所以说，ref 可以处理基本类型和引用类型，而 reactive 处理的是引用类型，二者的区别不是很大。</p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li><p>首先我们取一个对象{a: 1}</p></li><li><p>然后调用封装好的 reactive 函数 const state &#x3D; reactive({a: 1})</p></li><li><p>这个时候就会进入代码片段 1.1 里面的 reactive 函数，在进入 createReactiveObject 函数</p></li><li><p>然后就会对我们要代理的对象进行判断，如果是对象的话就继续下去</p></li><li><p>在判断我们是不是已经代理过这个对象（就是我们预先空出一个位置，将已经代理过的对象全部存储下来），代理过就返回代理后的值，没有的话就创建一个新的代理</p></li><li><p>再然后绑定上 proxy 函数里面的 get 和 set 回调函数（可以看到代码 1.2）</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 Api</title>
      <link href="//post/vue3%20Api.html"/>
      <url>//post/vue3%20Api.html</url>
      
        <content type="html"><![CDATA[<p><strong>defineProps()和 defineEmits()</strong></p><p>v-model:childValueModel 修改了值 本来应该是 modeValue</p><p>defineEmites() 使用要添加 update:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;defineModelChild v-model;childValueModel=<span class="string">&quot;childValue&quot;</span>&gt;&lt;/defineModelChild&gt;</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; childValueModel &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myEmits(&#x27;update:childValueModel&#x27;, childValueModel + 1)&quot;</span>&gt;</span>数据 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> myProps = <span class="title function_">defineProps</span>([<span class="string">&#x27;childValueModel&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> myEmits= <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:childValueModel&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/defineProps-----defineEmits .vue&#x27;</span></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">a</span>=<span class="string">&quot;qwdqwd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">count</span>=<span class="string">&#x27;count&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;count&quot;</span>])</span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>((&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="title class_">String</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count.<span class="property">value</span>++</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&quot;count&quot;</span>, count.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125; &#123;&#123;props.a&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>defineModel() 3.4+版本</strong></p><p>defineModel 其实也是一个语法糖，是对 v-model 再包装的语法糖</p><p>defineModel 帮你获取到了 prop 中的 modelValue ，且当 值发生变化时，会自动帮你调用 update:modelValue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myProps = <span class="title function_">defineProps</span>([<span class="string">&quot;modelValue&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> myEmits = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:modelValue&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 说白了，这里的 modelValue 等价于 props.modelValue + emit(&#x27;update:modelValue&#x27;)</span></span><br><span class="line"><span class="comment">// defineModel 帮你 封装了 modelValue 和 update:modelValue</span></span><br><span class="line"><span class="keyword">const</span> modelValue = <span class="title function_">defineModel</span>();</span><br></pre></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">defineModelChild</span> <span class="attr">v-model</span>=<span class="string">&quot;childValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">defineModelChild</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> defineModelChild <span class="keyword">from</span> <span class="string">&#x27;./components/defineModelChild.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> childValue = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>v-model 子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; modelValue &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myEmits(&#x27;update:modelValue&#x27;, modelValue + 1)&quot;</span>&gt;</span>数据 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">defineProps</span>([<span class="string">&#x27;modelValue&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> myEmits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>defineModel() 子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; modelValue &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modelValue++&quot;</span>&gt;</span>数据 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> modelValue = <span class="title function_">defineModel</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>defineExpose 子传父</strong></p><p>（用在子组件，暴露想传递的值或方法，父组件通过 ref 属性获取子组件暴露的）</p><p>使用 script setup 的组件是默认关闭的——即通过模板引用或者 $parent 链获取到的组件的公开实例，不会暴露任何在 script setup 中声明的绑定。</p><p>那么，通过 defineExpose 编译器宏来显式指定在</p><p>然后，父组件通过 ref 属性访问子组件</p><p><strong>父组件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Index</span> ref=<span class="string">&quot;childeRef&quot;</span>&gt;&lt;/<span class="title class_">Index</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> <span class="title class_">Index</span> <span class="keyword">from</span> <span class="string">&quot;./index.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> childeRef = <span class="title function_">ref</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(childeRef.<span class="property">value</span>.<span class="property">msg</span>) <span class="comment">// Hello World</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> <span class="attr">flag</span>:boolean = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> <span class="attr">value</span>:number= <span class="number">5</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      childeRef.<span class="property">value</span>.<span class="title function_">childFn</span>(flag,value) <span class="comment">// 调用子组件函数, 输出 6</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>子组件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">childFn</span>(<span class="params">type：boolean, data：number</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是子组件&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(data)&#123;</span><br><span class="line">           <span class="keyword">let</span> value = data + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">defineExpose</span>(&#123; <span class="comment">//暴露想要传递的值或方法</span></span><br><span class="line">        msg,</span><br><span class="line">        childFn,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>defineOptions 3.3+</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title function_">defineOptions</span>(&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line"><span class="comment">//组件重命名</span></span><br><span class="line"> <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">//...更多自定义属性</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>computed 计算属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">books</span>: [</span><br><span class="line">    <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27; Yes&#x27;</span> : <span class="string">&quot;No&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; publishedBooksMessage &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>computed 传参</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">  <span class="attr">books</span>: [</span><br><span class="line">    <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">    <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27; Yes&#x27;</span> : <span class="string">&quot;No&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; publishedBooksMessage(12) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>watch 监听</strong></p><p><strong>默认开启深度监听</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">btnClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  count.<span class="property">value</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ✅ 方法一，传递响应对象</span></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ❌ 方法二：传递响应对象下的属性</span></span><br><span class="line"><span class="title function_">watch</span>(user.<span class="property">name</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 监听失败，没输出</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ✅ 方法三：传递函数，函数返回响应对象属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> user.<span class="property">name</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 监听成功，输出 jake</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; count &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>watchEffect 的使用</strong></p><p>watchEffect 也是一个帧听器，是一个副作用函数。 它会监听引用数据类型的所有属性，不需要具体到某个属性，一旦运行就会立即监听，组件卸载的时候会停止监听。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, ref, watch, watchEffect &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;112&#x27;</span>, <span class="attr">data</span>: [<span class="string">&quot;你好&quot;</span>] &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">btnClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  count.<span class="property">data</span>[<span class="number">0</span>] = <span class="string">&#x27;被改了&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">data</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"> <span class="title function_">watch</span>([count,obj],<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听的多个数据改变了&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;count.data[0]&#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>stopWatchEffect 停止监听</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span>, obj.<span class="property">name</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stopWatchEffect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;停止监听&quot;</span>);</span><br><span class="line">  <span class="title function_">stop</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>onInvalidate 函数 解决执行顺序乱的问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
