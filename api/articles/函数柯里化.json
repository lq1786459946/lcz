{"title":"函数柯里化","uid":"9362a9fd3d9a6f67374a66848577cfe7","slug":"函数柯里化","date":"2025-01-10T07:50:20.000Z","updated":"2025-01-15T06:27:45.299Z","comments":true,"path":"api/articles/函数柯里化.json","keywords":null,"cover":null,"content":"<h3 id=\"什么是柯里化\"><a href=\"#什么是柯里化\" class=\"headerlink\" title=\"什么是柯里化\"></a>什么是柯里化</h3><p>先给出函数柯里化的定义 ：<strong>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</strong></p>\n<p>例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b + c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p>这个是一个累加函数，接收三个参数，但是<strong>假设我有这样一种需求就是前两个参数不变，然后最后一个参数可以随意</strong>。</p>\n<p>很多人，第一想法就是传入前两个不改不就行了。其实这个也能说是一个解决方案，但是代码得优雅，经常一调用就得穿前面那俩个固定的参数是不是很繁琐而且容易出错，出错之后还不好排查，对吧。</p>\n<p>再去分析这个需求，咱们先不管函数的具体实现，这个需求的调用写法<code>sum(1, 2)(3);</code>这样 <code>sum(1, 2)(10);</code> 。就是，先把前 2 个参数的运算结果拿到后，再与第 3 个参数相加。<strong>这个就是函数柯里化的简单应用</strong></p>\n<h3 id=\"柯里化实现\"><a href=\"#柯里化实现\" class=\"headerlink\" title=\"柯里化实现\"></a>柯里化实现</h3><p><code>sum(1, 2)(3);</code> 这样的写法，并不常见。拆开来看，<code>sum(1, 2)</code> 返回的应该还是个函数，因为后面还有 <code>(3)</code> 需要执行。其实你会发现<code>sum(1,2)</code>其实是不是返回的就是一个函数，然后函数在调用传参才返回的最终结果。 然后反过来，从最后一个参数，从右往左看，它的左侧必然是一个函数。以此类推，如果前面有 n 个()，那就是有 n 个函数返回了结果，只是返回的结果，还是一个函数。是不是有点递归的意思？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &gt;= fn.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(...args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...moreArgs</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">curried</span>(...args, ...moreArgs);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> curriedAdd = <span class=\"title function_\">curry</span>(add);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数的柯里化，是 <code>JavaScript</code> 中函数式编程的一个重要概念。它返回的，是一个函数的函数。其实现方式，需要依赖参数以及递归，通过拆分参数的方式，来调用一个多参数的函数方法，以达到减少代码冗余，增加可读性的目的。</strong></p>\n","text":"什么是柯里化先给出函数柯里化的定义 ：在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。 例子 1234funct...","permalink":"/post/函数柯里化","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"JS","slug":"JS","count":5,"path":"api/categories/JS.json"}],"tags":[{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%9F%AF%E9%87%8C%E5%8C%96\"><span class=\"toc-text\">什么是柯里化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%AF%E9%87%8C%E5%8C%96%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">柯里化实现</span></a></li></ol>","author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"前端项目协同开发统一代码格式化","uid":"bda55ba4f6f13ee1e9f8f3091a69e603","slug":"前端项目协同开发统一代码格式化","date":"2025-01-17T06:01:50.000Z","updated":"2025-01-17T06:07:31.330Z","comments":true,"path":"api/articles/前端项目协同开发统一代码格式化.json","keywords":null,"cover":[],"text":"问题背景现有业务项目中，开发人员使用的ide五花八门，既有Visual Studio Code、webstorm，也有idea、pycharm这种偏后端的ide...","permalink":"/post/前端项目协同开发统一代码格式化","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"其他","slug":"其他","count":3,"path":"api/categories/其他.json"}],"tags":[{"name":"其他","slug":"其他","count":3,"path":"api/tags/其他.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"setTimeout不准时?","uid":"29983d06ba41eaf724125282c4708e00","slug":"setTimeout不准时","date":"2025-01-03T05:52:50.000Z","updated":"2025-01-03T06:11:55.237Z","comments":true,"path":"api/articles/setTimeout不准时.json","keywords":null,"cover":null,"text":"演示使用一个计数器来记录每次 setTimeout 的调用。设定的间隔时间乘以计数次数，理想情况下应等于预期的延迟。通过以下示例，可以检查我们计时器的准确性。 ...","permalink":"/post/setTimeout不准时","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JS","slug":"JS","count":5,"path":"api/categories/JS.json"}],"tags":[{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}