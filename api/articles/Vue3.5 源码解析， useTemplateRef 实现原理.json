{"title":"Vue3.5 源码解析， useTemplateRef 实现原理","uid":"32c8c23c6d89385feba3d0e7e602221c","slug":"Vue3.5 源码解析， useTemplateRef 实现原理","date":"2024-09-06T06:07:04.000Z","updated":"2024-09-20T07:23:59.401Z","comments":true,"path":"api/articles/Vue3.5 源码解析， useTemplateRef 实现原理.json","keywords":null,"cover":null,"content":"<h2 id=\"useTemplateRef-的作用\"><a href=\"#useTemplateRef-的作用\" class=\"headerlink\" title=\"useTemplateRef 的作用\"></a>useTemplateRef 的作用</h2><p>useTemplateRef 是用来专门获取 dom 或者 组件示例 的。</p>\n<p>在之前，如果我们想要获取 dom ，那么需要这么做：</p>\n<ol>\n<li><p>先为 dom 指定 ref 属性，并且给定一个 value 值</p>\n</li>\n<li><p>在 js 中，声明 value 值的变量，并且给定初始值为 空的 ref</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\"><span class=\"comment\">// 首先，您定义了一个值为undefined或空的ref</span></span><br><span class=\"line\"><span class=\"comment\">// 并以您想要的方式命名生成的可用内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> divEl = <span class=\"title function_\">ref</span>();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"comment\">&lt;!-- 然后使用与“ref”属性的值相同的名称,在模板中的某个地方 --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;divEl&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>但是，这种方案存在一个问题，那就是：ref 通常用来声明响应式数据。当 ref 不光作为响应式声明，还被作为 dom 实例的时候，那么就难免有点让人疑惑了。</p>\n<p>所以在（3.5 之后） Vue 推出了一个新的 API 叫做 useTemplateRef 来解决这个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;el&quot;</span>&gt;</span>程序员Sunday<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; onMounted, useTemplateRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> elRef = <span class=\"title function_\">useTemplateRef</span>(<span class=\"string\">&#x27;el&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(elRef.<span class=\"property\">value</span>) <span class=\"comment\">// dom 示例</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"useTemplateRef-的实现原理\"><a href=\"#useTemplateRef-的实现原理\" class=\"headerlink\" title=\"useTemplateRef 的实现原理\"></a>useTemplateRef 的实现原理</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useTemplateRef</span>(<span class=\"params\">key: Keys</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> i = <span class=\"title function_\">getCurrentInstance</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = <span class=\"title function_\">shallowRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> refs = i.<span class=\"property\">refs</span> === <span class=\"variable constant_\">EMPTY_OBJ</span> ? (i.<span class=\"property\">refs</span> = &#123;&#125;) : i.<span class=\"property\">refs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(refs, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> r.<span class=\"property\">value</span>,</span><br><span class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> (r.<span class=\"property\">value</span> = val),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"第一个-i：通过-getCurrentInstance-获取，得到的是-上下文实例。\"><a href=\"#第一个-i：通过-getCurrentInstance-获取，得到的是-上下文实例。\" class=\"headerlink\" title=\"第一个 i：通过 getCurrentInstance() 获取，得到的是 上下文实例。\"></a>第一个 i：通过 getCurrentInstance() 获取，得到的是 上下文实例。</h5><p>​ 接下来，通过 i.refs 获取到所有的 ref 数据，然后为 refs 添加 Object.defineProperty 的监听，监听的属性名就是入参 key。如果以 useTemplateRef(‘el’) 为例，那么就是 “el”。</p>\n<p>通过监听对应 key 的 get 和 set 标记，这里 重点关注 set 标记，在这里为 r.value 进行了赋值，即：r.value &#x3D; val。这里的 val 就是 refs[key] 的值，也就是对应的 ref 组件实例。</p>\n<h5 id=\"第二个-r：通过-shallowRef-null-获取，作为返回值\"><a href=\"#第二个-r：通过-shallowRef-null-获取，作为返回值\" class=\"headerlink\" title=\"第二个 r：通过 shallowRef(null) 获取，作为返回值\"></a>第二个 r：通过 shallowRef(null) 获取，作为返回值</h5><p>r 作为 useTemplateRef 的返回值即 最终获取的组件示例。</p>\n","text":"useTemplateRef 的作用useTemplateRef 是用来专门获取 dom 或者 组件示例 的。 在之前，如果我们想要获取 dom ，那么需要这么...","permalink":"/post/Vue3.5 源码解析， useTemplateRef 实现原理","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Vue3","slug":"Vue3","count":7,"path":"api/categories/Vue3.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":7,"path":"api/tags/Vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useTemplateRef-%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">useTemplateRef 的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useTemplateRef-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">useTemplateRef 的实现原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA-i%EF%BC%9A%E9%80%9A%E8%BF%87-getCurrentInstance-%E8%8E%B7%E5%8F%96%EF%BC%8C%E5%BE%97%E5%88%B0%E7%9A%84%E6%98%AF-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%AE%9E%E4%BE%8B%E3%80%82\"><span class=\"toc-text\">第一个 i：通过 getCurrentInstance() 获取，得到的是 上下文实例。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E4%B8%AA-r%EF%BC%9A%E9%80%9A%E8%BF%87-shallowRef-null-%E8%8E%B7%E5%8F%96%EF%BC%8C%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">第二个 r：通过 shallowRef(null) 获取，作为返回值</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"前端大屏自适应方案","uid":"d5edacab67506b18e45fcb0990be9618","slug":"前端大屏自适应方案","date":"2024-09-12T02:58:20.000Z","updated":"2024-09-20T07:24:47.431Z","comments":true,"path":"api/articles/前端大屏自适应方案.json","keywords":null,"cover":null,"text":"易用 🚀调用仅需一行代码，即可适配设置分辨率以下的所有屏幕，无需任何其他辅助 性能 ⚡只影响一个元素样式，计算量极小 灵活 💥可以给项目全局自适应，也可以单独页...","permalink":"/post/前端大屏自适应方案","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"JS","slug":"JS","count":5,"path":"api/categories/JS.json"}],"tags":[{"name":"JS","slug":"JS","count":5,"path":"api/tags/JS.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ref和reactive原理","uid":"c34479c7fc43ef2eede71b250f18b4aa","slug":"ref和reactive原理","date":"2024-08-27T08:30:20.000Z","updated":"2024-09-20T07:23:44.692Z","comments":true,"path":"api/articles/ref和reactive原理.json","keywords":null,"cover":null,"text":"refref 的处理上就是先将基本类型转换成对象类型，然后在里面加入一个 this._v_isRef 的布尔类型的值，来判断它是不是被 ref 处理了，然后将上...","permalink":"/post/ref和reactive原理","photos":[],"count_time":{"symbolsCount":517,"symbolsTime":"1 mins."},"categories":[{"name":"Vue3","slug":"Vue3","count":7,"path":"api/categories/Vue3.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":7,"path":"api/tags/Vue3.json"}],"author":{"name":"权栈","slug":"blog-author","avatar":"https://p6-passport.byteacctimg.com/img/user-avatar/40c734cabc45915e93f17b88134aa761~140x140.awebp","link":"/","description":"成就伟大的唯一途径就是热爱你所做的事情","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}